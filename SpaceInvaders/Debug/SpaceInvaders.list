
SpaceInvaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004434  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0005c8a8  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08060e74  08060e74  0009d0d8  2**0
                  CONTENTS
  4 .ARM          00000008  08060e74  08060e74  00070e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08060e7c  08060e7c  0009d0d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08060e7c  08060e7c  00070e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08060e80  08060e80  00070e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001d0d8  20000000  08060e84  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c5c  2001d0d8  0807df5c  0009d0d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001dd34  0807df5c  0009dd34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0009d0d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000091f2  00000000  00000000  0009d108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b43  00000000  00000000  000a62fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  000a7e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000670  00000000  00000000  000a8598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015ccf  00000000  00000000  000a8c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080a0  00000000  00000000  000be8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085201  00000000  00000000  000c6977  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bb78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d98  00000000  00000000  0014bbf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0014d98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0014d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2001d0d8 	.word	0x2001d0d8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080045b4 	.word	0x080045b4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2001d0dc 	.word	0x2001d0dc
 80001d4:	080045b4 	.word	0x080045b4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <Sprite2Mem>:
};




uint8_t* Sprite2Mem(uint8_t *start, uint8_t *invader, uint8_t w, uint8_t h){
 80004d8:	b480      	push	{r7}
 80004da:	b08b      	sub	sp, #44	; 0x2c
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	4611      	mov	r1, r2
 80004e4:	461a      	mov	r2, r3
 80004e6:	460b      	mov	r3, r1
 80004e8:	71fb      	strb	r3, [r7, #7]
 80004ea:	4613      	mov	r3, r2
 80004ec:	71bb      	strb	r3, [r7, #6]
	uint8_t *invptr1 = invader;
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t *invptr2 = invader;
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	623b      	str	r3, [r7, #32]
	uint8_t *memloc = start;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	61fb      	str	r3, [r7, #28]

	//Invader1
	for(int r = 0; r < h; ++r){
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
 80004fe:	e048      	b.n	8000592 <Sprite2Mem+0xba>
		for(int c = 0; c < w; ++c){
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e01b      	b.n	800053e <Sprite2Mem+0x66>
			if(*invptr1 == 1){
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d107      	bne.n	800051e <Sprite2Mem+0x46>
				*memloc = 48;
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	2230      	movs	r2, #48	; 0x30
 8000512:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 48;
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	3301      	adds	r3, #1
 8000518:	2230      	movs	r2, #48	; 0x30
 800051a:	701a      	strb	r2, [r3, #0]
 800051c:	e006      	b.n	800052c <Sprite2Mem+0x54>
			}else{
				*memloc = 0;
 800051e:	69fb      	ldr	r3, [r7, #28]
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 0;
 8000524:	69fb      	ldr	r3, [r7, #28]
 8000526:	3301      	adds	r3, #1
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
			}
			memloc += 2;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3302      	adds	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
			invptr1++;
 8000532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000534:	3301      	adds	r3, #1
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
		for(int c = 0; c < w; ++c){
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	3301      	adds	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	697a      	ldr	r2, [r7, #20]
 8000542:	429a      	cmp	r2, r3
 8000544:	dbdf      	blt.n	8000506 <Sprite2Mem+0x2e>
		}

		for(int c = 0; c < w; ++c){
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
 800054a:	e01b      	b.n	8000584 <Sprite2Mem+0xac>
			if(*invptr2 == 1){
 800054c:	6a3b      	ldr	r3, [r7, #32]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d107      	bne.n	8000564 <Sprite2Mem+0x8c>
				*memloc = 48;
 8000554:	69fb      	ldr	r3, [r7, #28]
 8000556:	2230      	movs	r2, #48	; 0x30
 8000558:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 48;
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	3301      	adds	r3, #1
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e006      	b.n	8000572 <Sprite2Mem+0x9a>
			}else{
				*memloc = 0;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
				*(memloc+1) = 0;
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
			}
			memloc += 2;
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3302      	adds	r3, #2
 8000576:	61fb      	str	r3, [r7, #28]
			invptr2++;
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	3301      	adds	r3, #1
 800057c:	623b      	str	r3, [r7, #32]
		for(int c = 0; c < w; ++c){
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	3301      	adds	r3, #1
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	693a      	ldr	r2, [r7, #16]
 8000588:	429a      	cmp	r2, r3
 800058a:	dbdf      	blt.n	800054c <Sprite2Mem+0x74>
	for(int r = 0; r < h; ++r){
 800058c:	69bb      	ldr	r3, [r7, #24]
 800058e:	3301      	adds	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	69ba      	ldr	r2, [r7, #24]
 8000596:	429a      	cmp	r2, r3
 8000598:	dbb2      	blt.n	8000500 <Sprite2Mem+0x28>
		}
	}

	return memloc;
 800059a:	69fb      	ldr	r3, [r7, #28]
}
 800059c:	4618      	mov	r0, r3
 800059e:	372c      	adds	r7, #44	; 0x2c
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <LDRSprites>:

void LDRSprites(uint8_t *start){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint8_t *memloc;
	memloc = Sprite2Mem(start, Invader1, 11, 8);
 80005b0:	2308      	movs	r3, #8
 80005b2:	220b      	movs	r2, #11
 80005b4:	490e      	ldr	r1, [pc, #56]	; (80005f0 <LDRSprites+0x48>)
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff ff8e 	bl	80004d8 <Sprite2Mem>
 80005bc:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Invader2, 8, 8);
 80005be:	2308      	movs	r3, #8
 80005c0:	2208      	movs	r2, #8
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <LDRSprites+0x4c>)
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff ff87 	bl	80004d8 <Sprite2Mem>
 80005ca:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Invader3, 12, 8);
 80005cc:	2308      	movs	r3, #8
 80005ce:	220c      	movs	r2, #12
 80005d0:	4909      	ldr	r1, [pc, #36]	; (80005f8 <LDRSprites+0x50>)
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f7ff ff80 	bl	80004d8 <Sprite2Mem>
 80005d8:	60f8      	str	r0, [r7, #12]
	memloc = Sprite2Mem(memloc, Ship, 11, 8);
 80005da:	2308      	movs	r3, #8
 80005dc:	220b      	movs	r2, #11
 80005de:	4907      	ldr	r1, [pc, #28]	; (80005fc <LDRSprites+0x54>)
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f7ff ff79 	bl	80004d8 <Sprite2Mem>
 80005e6:	60f8      	str	r0, [r7, #12]
}
 80005e8:	bf00      	nop
 80005ea:	3710      	adds	r7, #16
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000000 	.word	0x20000000
 80005f4:	20000060 	.word	0x20000060
 80005f8:	200000a0 	.word	0x200000a0
 80005fc:	20000100 	.word	0x20000100

08000600 <HAL_GPIO_EXTI_Callback>:
Bool s = FALSE;
Bool d = FALSE;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
	 */

	if(GPIO_Pin == GPIO_PIN_3)
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2b08      	cmp	r3, #8
 800060e:	d109      	bne.n	8000624 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 8000610:	2108      	movs	r1, #8
 8000612:	4827      	ldr	r0, [pc, #156]	; (80006b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000614:	f002 fb70 	bl	8002cf8 <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <HAL_GPIO_EXTI_Callback+0x24>
			play=1;
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
		}
	}

	if(GPIO_Pin == GPIO_PIN_0)
 8000624:	88fb      	ldrh	r3, [r7, #6]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d109      	bne.n	800063e <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){
 800062a:	2101      	movs	r1, #1
 800062c:	4820      	ldr	r0, [pc, #128]	; (80006b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800062e:	f002 fb63 	bl	8002cf8 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d002      	beq.n	800063e <HAL_GPIO_EXTI_Callback+0x3e>
			fire=1;
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800063a:	2201      	movs	r2, #1
 800063c:	601a      	str	r2, [r3, #0]
		}
	}

	//d
	if(GPIO_Pin == GPIO_PIN_9)
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000644:	d115      	bne.n	8000672 <HAL_GPIO_EXTI_Callback+0x72>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)){
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	481c      	ldr	r0, [pc, #112]	; (80006bc <HAL_GPIO_EXTI_Callback+0xbc>)
 800064c:	f002 fb54 	bl	8002cf8 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d002      	beq.n	800065c <HAL_GPIO_EXTI_Callback+0x5c>

			d=TRUE;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
		}

		if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9)){
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4816      	ldr	r0, [pc, #88]	; (80006bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8000662:	f002 fb49 	bl	8002cf8 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <HAL_GPIO_EXTI_Callback+0x72>

			d=FALSE;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
		}

	}

	//a
	if(GPIO_Pin == GPIO_PIN_10)
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000678:	d115      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0xa6>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)){
 800067a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067e:	480f      	ldr	r0, [pc, #60]	; (80006bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8000680:	f002 fb3a 	bl	8002cf8 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <HAL_GPIO_EXTI_Callback+0x90>

			a=TRUE;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]
		}

		if(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10)){
 8000690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000694:	4809      	ldr	r0, [pc, #36]	; (80006bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8000696:	f002 fb2f 	bl	8002cf8 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d102      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0xa6>

			a=FALSE;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
		}
	}


}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020000 	.word	0x40020000
 80006b4:	2001d0f8 	.word	0x2001d0f8
 80006b8:	2001d0fc 	.word	0x2001d0fc
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	2001d114 	.word	0x2001d114
 80006c4:	2001d110 	.word	0x2001d110

080006c8 <displayscore>:
};*/



void displayscore(uint16_t val, uint32_t* screenptr)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b089      	sub	sp, #36	; 0x24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	80fb      	strh	r3, [r7, #6]
	uint8_t digit = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	72fb      	strb	r3, [r7, #11]
	uint32_t* digitptr;
	uint32_t* scrcopyptr;
	for (int i = 0; i < 5; i++)
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	e040      	b.n	8000760 <displayscore+0x98>
	{
		digit = val % 10;
 80006de:	88fa      	ldrh	r2, [r7, #6]
 80006e0:	4b24      	ldr	r3, [pc, #144]	; (8000774 <displayscore+0xac>)
 80006e2:	fba3 1302 	umull	r1, r3, r3, r2
 80006e6:	08d9      	lsrs	r1, r3, #3
 80006e8:	460b      	mov	r3, r1
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	72fb      	strb	r3, [r7, #11]
		val /= 10;
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <displayscore+0xac>)
 80006fa:	fba2 2303 	umull	r2, r3, r2, r3
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	80fb      	strh	r3, [r7, #6]

		scrcopyptr = screenptr;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	61bb      	str	r3, [r7, #24]
		digitptr = (uint32_t*)(digits + (digit << 3));
 8000706:	7afb      	ldrb	r3, [r7, #11]
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	461a      	mov	r2, r3
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <displayscore+0xb0>)
 800070e:	4413      	add	r3, r2
 8000710:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < 9; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	e01a      	b.n	800074e <displayscore+0x86>
		{
			for (int j = 0; j < 2; j++)
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e00a      	b.n	8000734 <displayscore+0x6c>
			{
				*scrcopyptr++ = *digitptr++;
 800071e:	69fa      	ldr	r2, [r7, #28]
 8000720:	1d13      	adds	r3, r2, #4
 8000722:	61fb      	str	r3, [r7, #28]
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	1d19      	adds	r1, r3, #4
 8000728:	61b9      	str	r1, [r7, #24]
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < 2; j++)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b01      	cmp	r3, #1
 8000738:	ddf1      	ble.n	800071e <displayscore+0x56>
			}
			digitptr += 18;
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3348      	adds	r3, #72	; 0x48
 800073e:	61fb      	str	r3, [r7, #28]
			scrcopyptr += 78;
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000746:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < 9; i++)
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	3301      	adds	r3, #1
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	2b08      	cmp	r3, #8
 8000752:	dde1      	ble.n	8000718 <displayscore+0x50>

		}
		screenptr -= 2;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3b08      	subs	r3, #8
 8000758:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 5; i++)
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	3301      	adds	r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b04      	cmp	r3, #4
 8000764:	ddbb      	ble.n	80006de <displayscore+0x16>
	}
}
 8000766:	bf00      	nop
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	cccccccd 	.word	0xcccccccd
 8000778:	080045cc 	.word	0x080045cc

0800077c <drawSprite>:



void drawSprite(unsigned char* ptr_sprite, int x, int y, int sprite_w, int sprite_h)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	603b      	str	r3, [r7, #0]
	uint32_t *ptrscreen;
	uint32_t *ptrsprite;

	//draw sprite
	ptrscreen = (uint32_t*)(0x20020000 + x+320*y);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 8000790:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8000794:	6879      	ldr	r1, [r7, #4]
 8000796:	460b      	mov	r3, r1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	4413      	add	r3, r2
 80007a0:	61fb      	str	r3, [r7, #28]
	ptrsprite = (uint32_t*)ptr_sprite;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < sprite_h; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e024      	b.n	80007f6 <drawSprite+0x7a>
	{
		for(int j = 0; j < sprite_w/4; j++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	e00a      	b.n	80007c8 <drawSprite+0x4c>
		{
			*ptrscreen++ = *ptrsprite++;
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	1d13      	adds	r3, r2, #4
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	1d19      	adds	r1, r3, #4
 80007bc:	61f9      	str	r1, [r7, #28]
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < sprite_w/4; j++)
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	3301      	adds	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	da00      	bge.n	80007d0 <drawSprite+0x54>
 80007ce:	3303      	adds	r3, #3
 80007d0:	109b      	asrs	r3, r3, #2
 80007d2:	461a      	mov	r2, r3
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	4293      	cmp	r3, r2
 80007d8:	dbeb      	blt.n	80007b2 <drawSprite+0x36>
		}
		ptrscreen += (320/4 - sprite_w/4);
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da00      	bge.n	80007e2 <drawSprite+0x66>
 80007e0:	3303      	adds	r3, #3
 80007e2:	109b      	asrs	r3, r3, #2
 80007e4:	425b      	negs	r3, r3
 80007e6:	3350      	adds	r3, #80	; 0x50
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	69fa      	ldr	r2, [r7, #28]
 80007ec:	4413      	add	r3, r2
 80007ee:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < sprite_h; i++)
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	3301      	adds	r3, #1
 80007f4:	617b      	str	r3, [r7, #20]
 80007f6:	697a      	ldr	r2, [r7, #20]
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	429a      	cmp	r2, r3
 80007fc:	dbd6      	blt.n	80007ac <drawSprite+0x30>
	}
}
 80007fe:	bf00      	nop
 8000800:	3724      	adds	r7, #36	; 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <clearSprite>:

void clearSprite(unsigned char* ptr_sprite, int xprev, int yprev, int sprite_w, int sprite_h)
{
 800080a:	b480      	push	{r7}
 800080c:	b089      	sub	sp, #36	; 0x24
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
 8000816:	603b      	str	r3, [r7, #0]
	uint32_t *ptrscreen;


	//clear sprite
	ptrscreen = (uint32_t*)(0x20020000 + xprev+320*yprev);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	f103 5200 	add.w	r2, r3, #536870912	; 0x20000000
 800081e:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	460b      	mov	r3, r1
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	440b      	add	r3, r1
 800082a:	019b      	lsls	r3, r3, #6
 800082c:	4413      	add	r3, r2
 800082e:	61fb      	str	r3, [r7, #28]

	for(int i = 0; i < sprite_h; i++)
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	e021      	b.n	800087a <clearSprite+0x70>
	{
		for(int j = 0; j < sprite_w/4; j++)
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	e007      	b.n	800084c <clearSprite+0x42>
		{
			*ptrscreen++ = 0;
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	1d1a      	adds	r2, r3, #4
 8000840:	61fa      	str	r2, [r7, #28]
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < sprite_w/4; j++)
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	da00      	bge.n	8000854 <clearSprite+0x4a>
 8000852:	3303      	adds	r3, #3
 8000854:	109b      	asrs	r3, r3, #2
 8000856:	461a      	mov	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	4293      	cmp	r3, r2
 800085c:	dbee      	blt.n	800083c <clearSprite+0x32>
		}
		ptrscreen += (320/4 - sprite_w/4);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	da00      	bge.n	8000866 <clearSprite+0x5c>
 8000864:	3303      	adds	r3, #3
 8000866:	109b      	asrs	r3, r3, #2
 8000868:	425b      	negs	r3, r3
 800086a:	3350      	adds	r3, #80	; 0x50
 800086c:	009b      	lsls	r3, r3, #2
 800086e:	69fa      	ldr	r2, [r7, #28]
 8000870:	4413      	add	r3, r2
 8000872:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < sprite_h; i++)
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	3301      	adds	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087e:	429a      	cmp	r2, r3
 8000880:	dbd9      	blt.n	8000836 <clearSprite+0x2c>
	}
}
 8000882:	bf00      	nop
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <clearScreen>:



void  clearScreen(){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	cleardone=0;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <clearScreen+0x38>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
	uint32_t* ptrscreen = (uint32_t*)0x20020000;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <clearScreen+0x3c>)
 800089e:	607b      	str	r3, [r7, #4]
	*((uint32_t*)ptrscreen) = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]

	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0,0x20020000,0x20020004,15999);
 80008a6:	f643 637f 	movw	r3, #15999	; 0x3e7f
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <clearScreen+0x40>)
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <clearScreen+0x3c>)
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <clearScreen+0x44>)
 80008b0:	f001 fde0 	bl	8002474 <HAL_DMA_Start_IT>

	while(!cleardone);
 80008b4:	bf00      	nop
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <clearScreen+0x38>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0fa      	beq.n	80008b6 <clearScreen+0x26>

}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2001d0f5 	.word	0x2001d0f5
 80008cc:	20020000 	.word	0x20020000
 80008d0:	20020004 	.word	0x20020004
 80008d4:	2001d844 	.word	0x2001d844

080008d8 <updateScreen>:

void  updateScreen(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af02      	add	r7, sp, #8

	drawSprite(scoretext2, 5,1, 52, 13);
 80008de:	230d      	movs	r3, #13
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	2334      	movs	r3, #52	; 0x34
 80008e4:	2201      	movs	r2, #1
 80008e6:	2105      	movs	r1, #5
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <updateScreen+0x5c>)
 80008ea:	f7ff ff47 	bl	800077c <drawSprite>
	displayscore(score, (uint32_t*)(0x2002069C));
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <updateScreen+0x60>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	4911      	ldr	r1, [pc, #68]	; (800093c <updateScreen+0x64>)
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fee6 	bl	80006c8 <displayscore>
	drawSprite(lives1, 200,1, 48, 13);
 80008fc:	230d      	movs	r3, #13
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2330      	movs	r3, #48	; 0x30
 8000902:	2201      	movs	r2, #1
 8000904:	21c8      	movs	r1, #200	; 0xc8
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <updateScreen+0x68>)
 8000908:	f7ff ff38 	bl	800077c <drawSprite>
	displayscore(lives, (uint32_t*)(0x2002075B));
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <updateScreen+0x6c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	b29b      	uxth	r3, r3
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <updateScreen+0x70>)
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fed7 	bl	80006c8 <displayscore>


	drawSprite(shooter2, Xpos,Ypos, 24, 23);
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <updateScreen+0x74>)
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <updateScreen+0x78>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	2317      	movs	r3, #23
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2318      	movs	r3, #24
 8000928:	480a      	ldr	r0, [pc, #40]	; (8000954 <updateScreen+0x7c>)
 800092a:	f7ff ff27 	bl	800077c <drawSprite>



}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	2001cdb0 	.word	0x2001cdb0
 8000938:	2001d100 	.word	0x2001d100
 800093c:	2002069c 	.word	0x2002069c
 8000940:	20000400 	.word	0x20000400
 8000944:	2001d058 	.word	0x2001d058
 8000948:	2002075b 	.word	0x2002075b
 800094c:	2001d060 	.word	0x2001d060
 8000950:	2001d064 	.word	0x2001d064
 8000954:	200001d8 	.word	0x200001d8

08000958 <alienFire>:

void alienFire()
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af02      	add	r7, sp, #8
	int select;
	if (ashot==0)
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <alienFire+0xb4>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d133      	bne.n	80009ce <alienFire+0x76>
	{

		ashot=1;
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <alienFire+0xb4>)
 8000968:	2201      	movs	r2, #1
 800096a:	601a      	str	r2, [r3, #0]

		do
		{
			select = 0 + (rand() % (24-0+1));
 800096c:	f003 fd46 	bl	80043fc <rand>
 8000970:	4602      	mov	r2, r0
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <alienFire+0xb8>)
 8000974:	fb83 1302 	smull	r1, r3, r3, r2
 8000978:	10d9      	asrs	r1, r3, #3
 800097a:	17d3      	asrs	r3, r2, #31
 800097c:	1ac9      	subs	r1, r1, r3
 800097e:	460b      	mov	r3, r1
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	440b      	add	r3, r1
 8000984:	0099      	lsls	r1, r3, #2
 8000986:	440b      	add	r3, r1
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	607b      	str	r3, [r7, #4]
		}while(alien[select].health!=1);
 800098c:	4921      	ldr	r1, [pc, #132]	; (8000a14 <alienFire+0xbc>)
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	4613      	mov	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	3310      	adds	r3, #16
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1e4      	bne.n	800096c <alienFire+0x14>





		amissx=alien[select].alienx+2;
 80009a2:	491c      	ldr	r1, [pc, #112]	; (8000a14 <alienFire+0xbc>)
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	440b      	add	r3, r1
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3302      	adds	r3, #2
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <alienFire+0xc0>)
 80009b6:	6013      	str	r3, [r2, #0]
		amissy=alien[select].alieny;
 80009b8:	4916      	ldr	r1, [pc, #88]	; (8000a14 <alienFire+0xbc>)
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	4613      	mov	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	3304      	adds	r3, #4
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <alienFire+0xc4>)
 80009cc:	6013      	str	r3, [r2, #0]





	if(ashot==1){
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <alienFire+0xb4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10e      	bne.n	80009f4 <alienFire+0x9c>

		amissy = amissy + 5;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <alienFire+0xc4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3305      	adds	r3, #5
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <alienFire+0xc4>)
 80009de:	6013      	str	r3, [r2, #0]
		drawSprite(laser,amissx,amissy, 4, 8);
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <alienFire+0xc0>)
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <alienFire+0xc4>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	2308      	movs	r3, #8
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2304      	movs	r3, #4
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <alienFire+0xc8>)
 80009f0:	f7ff fec4 	bl	800077c <drawSprite>
	}

	if(amissy>185)
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <alienFire+0xc4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2bb9      	cmp	r3, #185	; 0xb9
 80009fa:	dd02      	ble.n	8000a02 <alienFire+0xaa>
	{
		ashot=0;
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <alienFire+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
	}
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2001d10c 	.word	0x2001d10c
 8000a10:	51eb851f 	.word	0x51eb851f
 8000a14:	2001da24 	.word	0x2001da24
 8000a18:	2001dcc8 	.word	0x2001dcc8
 8000a1c:	2001da20 	.word	0x2001da20
 8000a20:	20000a50 	.word	0x20000a50

08000a24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b08d      	sub	sp, #52	; 0x34
 8000a28:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	LDRSprites(sprites);
 8000a2a:	48b5      	ldr	r0, [pc, #724]	; (8000d00 <main+0x2dc>)
 8000a2c:	f7ff fdbc 	bl	80005a8 <LDRSprites>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a30:	f001 facc 	bl	8001fcc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a34:	f000 ff34 	bl	80018a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a38:	f001 f854 	bl	8001ae4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000a3c:	f000 ffe6 	bl	8001a0c <MX_DMA_Init>
	MX_I2S3_Init();
 8000a40:	f000 ffb6 	bl	80019b0 <MX_I2S3_Init>
	/* USER CODE BEGIN 2 */

	srand(time(NULL));
 8000a44:	2000      	movs	r0, #0
 8000a46:	f003 fd0d 	bl	8004464 <time>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460c      	mov	r4, r1
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fcb0 	bl	80043b4 <srand>

	//create enemies

	for(int j = 0; j<24 ; j++){
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
 8000a58:	e0a8      	b.n	8000bac <main+0x188>

		if(j<=5)
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	2b05      	cmp	r3, #5
 8000a5e:	dc22      	bgt.n	8000aa6 <main+0x82>
		{

			alien[j].alienx = 15 + j*20 ;
 8000a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	f103 010f 	add.w	r1, r3, #15
 8000a6e:	48a5      	ldr	r0, [pc, #660]	; (8000d04 <main+0x2e0>)
 8000a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a72:	4613      	mov	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	1a9b      	subs	r3, r3, r2
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	4403      	add	r3, r0
 8000a7c:	6019      	str	r1, [r3, #0]
			alien[j].alieny = 20;
 8000a7e:	49a1      	ldr	r1, [pc, #644]	; (8000d04 <main+0x2e0>)
 8000a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a82:	4613      	mov	r3, r2
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	1a9b      	subs	r3, r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2214      	movs	r2, #20
 8000a90:	601a      	str	r2, [r3, #0]
			alien[j].health=1;
 8000a92:	499c      	ldr	r1, [pc, #624]	; (8000d04 <main+0x2e0>)
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	4613      	mov	r3, r2
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	1a9b      	subs	r3, r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	3310      	adds	r3, #16
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]

		}
		if((6<=j)&&(j<=11))
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	2b05      	cmp	r3, #5
 8000aaa:	dd26      	ble.n	8000afa <main+0xd6>
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	2b0b      	cmp	r3, #11
 8000ab0:	dc23      	bgt.n	8000afa <main+0xd6>
		{
			alien[j].alienx = 15 + (j-6)*20 ;
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab4:	1f9a      	subs	r2, r3, #6
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	f103 010f 	add.w	r1, r3, #15
 8000ac2:	4890      	ldr	r0, [pc, #576]	; (8000d04 <main+0x2e0>)
 8000ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4403      	add	r3, r0
 8000ad0:	6019      	str	r1, [r3, #0]
			alien[j].alieny = 35;
 8000ad2:	498c      	ldr	r1, [pc, #560]	; (8000d04 <main+0x2e0>)
 8000ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	1a9b      	subs	r3, r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	440b      	add	r3, r1
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	2223      	movs	r2, #35	; 0x23
 8000ae4:	601a      	str	r2, [r3, #0]
			alien[j].health=1;
 8000ae6:	4987      	ldr	r1, [pc, #540]	; (8000d04 <main+0x2e0>)
 8000ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000aea:	4613      	mov	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	3310      	adds	r3, #16
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

		}
		if((12<=j)&&(j<=17))
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	2b0b      	cmp	r3, #11
 8000afe:	dd27      	ble.n	8000b50 <main+0x12c>
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	2b11      	cmp	r3, #17
 8000b04:	dc24      	bgt.n	8000b50 <main+0x12c>
		{
			alien[j].alienx = 15 + (j-12)*20 ;
 8000b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b08:	f1a3 020c 	sub.w	r2, r3, #12
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	f103 010f 	add.w	r1, r3, #15
 8000b18:	487a      	ldr	r0, [pc, #488]	; (8000d04 <main+0x2e0>)
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	1a9b      	subs	r3, r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4403      	add	r3, r0
 8000b26:	6019      	str	r1, [r3, #0]
			alien[j].alieny = 50;
 8000b28:	4976      	ldr	r1, [pc, #472]	; (8000d04 <main+0x2e0>)
 8000b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	1a9b      	subs	r3, r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	440b      	add	r3, r1
 8000b36:	3304      	adds	r3, #4
 8000b38:	2232      	movs	r2, #50	; 0x32
 8000b3a:	601a      	str	r2, [r3, #0]
			alien[j].health=1;
 8000b3c:	4971      	ldr	r1, [pc, #452]	; (8000d04 <main+0x2e0>)
 8000b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b40:	4613      	mov	r3, r2
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	1a9b      	subs	r3, r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	440b      	add	r3, r1
 8000b4a:	3310      	adds	r3, #16
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]

		}
		if((18<=j)&&(j<=23))
 8000b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b52:	2b11      	cmp	r3, #17
 8000b54:	dd27      	ble.n	8000ba6 <main+0x182>
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	2b17      	cmp	r3, #23
 8000b5a:	dc24      	bgt.n	8000ba6 <main+0x182>
		{
			alien[j].alienx = 15 + (j-18)*20 ;
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	f1a3 0212 	sub.w	r2, r3, #18
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	f103 010f 	add.w	r1, r3, #15
 8000b6e:	4865      	ldr	r0, [pc, #404]	; (8000d04 <main+0x2e0>)
 8000b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	1a9b      	subs	r3, r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4403      	add	r3, r0
 8000b7c:	6019      	str	r1, [r3, #0]
			alien[j].alieny = 65;
 8000b7e:	4961      	ldr	r1, [pc, #388]	; (8000d04 <main+0x2e0>)
 8000b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b82:	4613      	mov	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	1a9b      	subs	r3, r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2241      	movs	r2, #65	; 0x41
 8000b90:	601a      	str	r2, [r3, #0]
			alien[j].health=1;
 8000b92:	495c      	ldr	r1, [pc, #368]	; (8000d04 <main+0x2e0>)
 8000b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b96:	4613      	mov	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	3310      	adds	r3, #16
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
	for(int j = 0; j<24 ; j++){
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	3301      	adds	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	2b17      	cmp	r3, #23
 8000bb0:	f77f af53 	ble.w	8000a5a <main+0x36>
	}

	//create bunkers

	//barrierA
	for (int j = 0; j < 12; j++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
 8000bb8:	e04c      	b.n	8000c54 <main+0x230>
	{


		if(j<=5)
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	dc1f      	bgt.n	8000c00 <main+0x1dc>
		{
			barrierA[j].barrierx =55+j*4;
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8000bc8:	484f      	ldr	r0, [pc, #316]	; (8000d08 <main+0x2e4>)
 8000bca:	6a3a      	ldr	r2, [r7, #32]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4403      	add	r3, r0
 8000bd6:	6019      	str	r1, [r3, #0]
			barrierA[j].barriery =150;
 8000bd8:	494b      	ldr	r1, [pc, #300]	; (8000d08 <main+0x2e4>)
 8000bda:	6a3a      	ldr	r2, [r7, #32]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	3304      	adds	r3, #4
 8000be8:	2296      	movs	r2, #150	; 0x96
 8000bea:	601a      	str	r2, [r3, #0]
			barrierA[j].health=2;
 8000bec:	4946      	ldr	r1, [pc, #280]	; (8000d08 <main+0x2e4>)
 8000bee:	6a3a      	ldr	r2, [r7, #32]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	3310      	adds	r3, #16
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	601a      	str	r2, [r3, #0]
		}
		if ((6<=j)&&(j<=11))
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	dd23      	ble.n	8000c4e <main+0x22a>
 8000c06:	6a3b      	ldr	r3, [r7, #32]
 8000c08:	2b0b      	cmp	r3, #11
 8000c0a:	dc20      	bgt.n	8000c4e <main+0x22a>
		{
			barrierA[j].barrierx =55+(j-6)*4;
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
 8000c0e:	3b06      	subs	r3, #6
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8000c16:	483c      	ldr	r0, [pc, #240]	; (8000d08 <main+0x2e4>)
 8000c18:	6a3a      	ldr	r2, [r7, #32]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4403      	add	r3, r0
 8000c24:	6019      	str	r1, [r3, #0]
			barrierA[j].barriery =154;
 8000c26:	4938      	ldr	r1, [pc, #224]	; (8000d08 <main+0x2e4>)
 8000c28:	6a3a      	ldr	r2, [r7, #32]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	440b      	add	r3, r1
 8000c34:	3304      	adds	r3, #4
 8000c36:	229a      	movs	r2, #154	; 0x9a
 8000c38:	601a      	str	r2, [r3, #0]
			barrierA[j].health=2;
 8000c3a:	4933      	ldr	r1, [pc, #204]	; (8000d08 <main+0x2e4>)
 8000c3c:	6a3a      	ldr	r2, [r7, #32]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	3310      	adds	r3, #16
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 12; j++)
 8000c4e:	6a3b      	ldr	r3, [r7, #32]
 8000c50:	3301      	adds	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	2b0b      	cmp	r3, #11
 8000c58:	ddaf      	ble.n	8000bba <main+0x196>


	}

	//barrierB
	for (int j = 0; j < 12; j++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	e049      	b.n	8000cf4 <main+0x2d0>
	{


		if(j<=5)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b05      	cmp	r3, #5
 8000c64:	dc1e      	bgt.n	8000ca4 <main+0x280>
		{
			barrierB[j].barrierx =160+j*4;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3328      	adds	r3, #40	; 0x28
 8000c6a:	0099      	lsls	r1, r3, #2
 8000c6c:	4827      	ldr	r0, [pc, #156]	; (8000d0c <main+0x2e8>)
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4403      	add	r3, r0
 8000c7a:	6019      	str	r1, [r3, #0]
			barrierB[j].barriery =150;
 8000c7c:	4923      	ldr	r1, [pc, #140]	; (8000d0c <main+0x2e8>)
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	440b      	add	r3, r1
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	2296      	movs	r2, #150	; 0x96
 8000c8e:	601a      	str	r2, [r3, #0]
			barrierB[j].health=2;
 8000c90:	491e      	ldr	r1, [pc, #120]	; (8000d0c <main+0x2e8>)
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3310      	adds	r3, #16
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	601a      	str	r2, [r3, #0]
		}
		if ((6<=j)&&(j<=11))
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	dd21      	ble.n	8000cee <main+0x2ca>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	2b0b      	cmp	r3, #11
 8000cae:	dc1e      	bgt.n	8000cee <main+0x2ca>
		{
			barrierB[j].barrierx =160+(j-6)*4;
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	3322      	adds	r3, #34	; 0x22
 8000cb4:	0099      	lsls	r1, r3, #2
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <main+0x2e8>)
 8000cb8:	69fa      	ldr	r2, [r7, #28]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4403      	add	r3, r0
 8000cc4:	6019      	str	r1, [r3, #0]
			barrierB[j].barriery =154;
 8000cc6:	4911      	ldr	r1, [pc, #68]	; (8000d0c <main+0x2e8>)
 8000cc8:	69fa      	ldr	r2, [r7, #28]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	229a      	movs	r2, #154	; 0x9a
 8000cd8:	601a      	str	r2, [r3, #0]
			barrierB[j].health=2;
 8000cda:	490c      	ldr	r1, [pc, #48]	; (8000d0c <main+0x2e8>)
 8000cdc:	69fa      	ldr	r2, [r7, #28]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	3310      	adds	r3, #16
 8000cea:	2202      	movs	r2, #2
 8000cec:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 12; j++)
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	2b0b      	cmp	r3, #11
 8000cf8:	ddb2      	ble.n	8000c60 <main+0x23c>

	}


	//barrierC
	for (int j = 0; j < 12; j++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	e054      	b.n	8000daa <main+0x386>
 8000d00:	2001d124 	.word	0x2001d124
 8000d04:	2001da24 	.word	0x2001da24
 8000d08:	2001d92c 	.word	0x2001d92c
 8000d0c:	2001d754 	.word	0x2001d754
	{


		if(j<=5)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2b05      	cmp	r3, #5
 8000d14:	dc1f      	bgt.n	8000d56 <main+0x332>
		{
			barrierC[j].barrierx =265+j*4;
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	f203 1109 	addw	r1, r3, #265	; 0x109
 8000d1e:	4869      	ldr	r0, [pc, #420]	; (8000ec4 <main+0x4a0>)
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4613      	mov	r3, r2
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	4413      	add	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4403      	add	r3, r0
 8000d2c:	6019      	str	r1, [r3, #0]
			barrierC[j].barriery =150;
 8000d2e:	4965      	ldr	r1, [pc, #404]	; (8000ec4 <main+0x4a0>)
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2296      	movs	r2, #150	; 0x96
 8000d40:	601a      	str	r2, [r3, #0]
			barrierC[j].health=2;
 8000d42:	4960      	ldr	r1, [pc, #384]	; (8000ec4 <main+0x4a0>)
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	3310      	adds	r3, #16
 8000d52:	2202      	movs	r2, #2
 8000d54:	601a      	str	r2, [r3, #0]
		}
		if ((6<=j)&&(j<=11))
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	dd23      	ble.n	8000da4 <main+0x380>
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b0b      	cmp	r3, #11
 8000d60:	dc20      	bgt.n	8000da4 <main+0x380>
		{
			barrierC[j].barrierx =265+(j-6)*4;
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	3b06      	subs	r3, #6
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	f203 1109 	addw	r1, r3, #265	; 0x109
 8000d6c:	4855      	ldr	r0, [pc, #340]	; (8000ec4 <main+0x4a0>)
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4403      	add	r3, r0
 8000d7a:	6019      	str	r1, [r3, #0]
			barrierC[j].barriery =154;
 8000d7c:	4951      	ldr	r1, [pc, #324]	; (8000ec4 <main+0x4a0>)
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4613      	mov	r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	440b      	add	r3, r1
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	229a      	movs	r2, #154	; 0x9a
 8000d8e:	601a      	str	r2, [r3, #0]
			barrierC[j].health=2;
 8000d90:	494c      	ldr	r1, [pc, #304]	; (8000ec4 <main+0x4a0>)
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3310      	adds	r3, #16
 8000da0:	2202      	movs	r2, #2
 8000da2:	601a      	str	r2, [r3, #0]
	for (int j = 0; j < 12; j++)
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	3301      	adds	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	2b0b      	cmp	r3, #11
 8000dae:	ddaf      	ble.n	8000d10 <main+0x2ec>
	}




	while(!play)
 8000db0:	e008      	b.n	8000dc4 <main+0x3a0>
	{
		drawSprite(background,0,0, 320, 200);
 8000db2:	23c8      	movs	r3, #200	; 0xc8
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4842      	ldr	r0, [pc, #264]	; (8000ec8 <main+0x4a4>)
 8000dc0:	f7ff fcdc 	bl	800077c <drawSprite>
	while(!play)
 8000dc4:	4b41      	ldr	r3, [pc, #260]	; (8000ecc <main+0x4a8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f2      	beq.n	8000db2 <main+0x38e>
	}
	clearSprite(background,0,0, 320, 200);
 8000dcc:	23c8      	movs	r3, #200	; 0xc8
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <main+0x4a4>)
 8000dda:	f7ff fd16 	bl	800080a <clearSprite>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		if((!bottom)&&(alien!=0)&&(lives>0))
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <main+0x4ac>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 852b 	bne.w	800183e <main+0xe1a>
 8000de8:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <main+0x4b0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f340 8526 	ble.w	800183e <main+0xe1a>
		{
			if(refresh)
 8000df2:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <main+0x4b4>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 8520 	beq.w	800183e <main+0xe1a>
			{
				clearScreen();
 8000dfe:	f7ff fd47 	bl	8000890 <clearScreen>
				updateScreen();
 8000e02:	f7ff fd69 	bl	80008d8 <updateScreen>

				refresh=0;
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <main+0x4b4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]



				//move ship
				if(a && (Xpos>0)){
 8000e0c:	4b33      	ldr	r3, [pc, #204]	; (8000edc <main+0x4b8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <main+0x402>
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <main+0x4bc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	dd04      	ble.n	8000e26 <main+0x402>
					Xpos-=5;
 8000e1c:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <main+0x4bc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3b05      	subs	r3, #5
 8000e22:	4a2f      	ldr	r2, [pc, #188]	; (8000ee0 <main+0x4bc>)
 8000e24:	6013      	str	r3, [r2, #0]
				}

				if(d && (Xpos+24<315)){
 8000e26:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <main+0x4c0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00a      	beq.n	8000e44 <main+0x420>
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <main+0x4bc>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3318      	adds	r3, #24
 8000e34:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8000e38:	dc04      	bgt.n	8000e44 <main+0x420>
					Xpos+=5;
 8000e3a:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <main+0x4bc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3305      	adds	r3, #5
 8000e40:	4a27      	ldr	r2, [pc, #156]	; (8000ee0 <main+0x4bc>)
 8000e42:	6013      	str	r3, [r2, #0]
				}

				//fire missile
				if(fire==1)
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <main+0x4c4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d136      	bne.n	8000eba <main+0x496>
				{

					if(shot!=1){
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <main+0x4c8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d015      	beq.n	8000e80 <main+0x45c>
						HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)shootaudio, AUDIOLEN1);
 8000e54:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000e58:	4925      	ldr	r1, [pc, #148]	; (8000ef0 <main+0x4cc>)
 8000e5a:	4826      	ldr	r0, [pc, #152]	; (8000ef4 <main+0x4d0>)
 8000e5c:	f002 f8bc 	bl	8002fd8 <HAL_I2S_Transmit_DMA>
						Xlaser=Xpos+10;
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <main+0x4bc>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	330a      	adds	r3, #10
 8000e66:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <main+0x4d4>)
 8000e68:	6013      	str	r3, [r2, #0]
						Ylaser=Ypos;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <main+0x4d8>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <main+0x4dc>)
 8000e70:	6013      	str	r3, [r2, #0]
						Ylaserprev=Ylaser;
 8000e72:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <main+0x4dc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <main+0x4e0>)
 8000e78:	6013      	str	r3, [r2, #0]
						shot=1;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <main+0x4c8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	601a      	str	r2, [r3, #0]
					}

					if(shot==1){
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <main+0x4c8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d118      	bne.n	8000eba <main+0x496>

						Ylaser=Ylaser-5;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <main+0x4dc>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3b05      	subs	r3, #5
 8000e8e:	4a1c      	ldr	r2, [pc, #112]	; (8000f00 <main+0x4dc>)
 8000e90:	6013      	str	r3, [r2, #0]
						drawSprite(laser, Xlaser,Ylaser, 4, 8);
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <main+0x4d4>)
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <main+0x4dc>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	4819      	ldr	r0, [pc, #100]	; (8000f08 <main+0x4e4>)
 8000ea2:	f7ff fc6b 	bl	800077c <drawSprite>



						if(Ylaser<5){
 8000ea6:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <main+0x4dc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	dc05      	bgt.n	8000eba <main+0x496>
							fire=0;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <main+0x4c4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
							shot=0;
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <main+0x4c8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
						}
					}
				}


				alienFire();
 8000eba:	f7ff fd4d 	bl	8000958 <alienFire>



				//draw barriers

				for (int j = 0; j < 12; j++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e341      	b.n	8001548 <main+0xb24>
 8000ec4:	2001d664 	.word	0x2001d664
 8000ec8:	20000a70 	.word	0x20000a70
 8000ecc:	2001d0f8 	.word	0x2001d0f8
 8000ed0:	2001d108 	.word	0x2001d108
 8000ed4:	2001d058 	.word	0x2001d058
 8000ed8:	2001d0f4 	.word	0x2001d0f4
 8000edc:	2001d110 	.word	0x2001d110
 8000ee0:	2001d060 	.word	0x2001d060
 8000ee4:	2001d114 	.word	0x2001d114
 8000ee8:	2001d0fc 	.word	0x2001d0fc
 8000eec:	2001d104 	.word	0x2001d104
 8000ef0:	0800489c 	.word	0x0800489c
 8000ef4:	2001dce4 	.word	0x2001dce4
 8000ef8:	2001d8a4 	.word	0x2001d8a4
 8000efc:	2001d064 	.word	0x2001d064
 8000f00:	2001d8c4 	.word	0x2001d8c4
 8000f04:	2001dcc4 	.word	0x2001dcc4
 8000f08:	20000a50 	.word	0x20000a50
				{

					if(barrierA[j].health!=0)
 8000f0c:	49b4      	ldr	r1, [pc, #720]	; (80011e0 <main+0x7bc>)
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	3310      	adds	r3, #16
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f000 80ed 	beq.w	80010fe <main+0x6da>
					{
						//test to see if player missile hits barrierA
						if((Xlaser-2<=barrierA[j].barrierx) && (Xlaser+2>=barrierA[j].barrierx) && (Ylaser-1<=barrierA[j].barriery) && (Ylaser+3>=barrierA[j].barriery))
 8000f24:	4baf      	ldr	r3, [pc, #700]	; (80011e4 <main+0x7c0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	1e99      	subs	r1, r3, #2
 8000f2a:	48ad      	ldr	r0, [pc, #692]	; (80011e0 <main+0x7bc>)
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4403      	add	r3, r0
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4299      	cmp	r1, r3
 8000f3c:	dc47      	bgt.n	8000fce <main+0x5aa>
 8000f3e:	4ba9      	ldr	r3, [pc, #676]	; (80011e4 <main+0x7c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	1c99      	adds	r1, r3, #2
 8000f44:	48a6      	ldr	r0, [pc, #664]	; (80011e0 <main+0x7bc>)
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4403      	add	r3, r0
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4299      	cmp	r1, r3
 8000f56:	db3a      	blt.n	8000fce <main+0x5aa>
 8000f58:	4ba3      	ldr	r3, [pc, #652]	; (80011e8 <main+0x7c4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	1e59      	subs	r1, r3, #1
 8000f5e:	48a0      	ldr	r0, [pc, #640]	; (80011e0 <main+0x7bc>)
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4403      	add	r3, r0
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4299      	cmp	r1, r3
 8000f72:	dc2c      	bgt.n	8000fce <main+0x5aa>
 8000f74:	4b9c      	ldr	r3, [pc, #624]	; (80011e8 <main+0x7c4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1cd9      	adds	r1, r3, #3
 8000f7a:	4899      	ldr	r0, [pc, #612]	; (80011e0 <main+0x7bc>)
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4403      	add	r3, r0
 8000f88:	3304      	adds	r3, #4
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4299      	cmp	r1, r3
 8000f8e:	db1e      	blt.n	8000fce <main+0x5aa>
						{

							barrierA[j].health-=1;
 8000f90:	4993      	ldr	r1, [pc, #588]	; (80011e0 <main+0x7bc>)
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3310      	adds	r3, #16
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	1e59      	subs	r1, r3, #1
 8000fa4:	488e      	ldr	r0, [pc, #568]	; (80011e0 <main+0x7bc>)
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	4403      	add	r3, r0
 8000fb2:	3310      	adds	r3, #16
 8000fb4:	6019      	str	r1, [r3, #0]

							fire=0;
 8000fb6:	4b8d      	ldr	r3, [pc, #564]	; (80011ec <main+0x7c8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
							shot=0;
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <main+0x7cc>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
							Xlaser=0;
 8000fc2:	4b88      	ldr	r3, [pc, #544]	; (80011e4 <main+0x7c0>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
							Ylaser=0;
 8000fc8:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <main+0x7c4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]

						}

						if(barrierA[j].health==2)
 8000fce:	4984      	ldr	r1, [pc, #528]	; (80011e0 <main+0x7bc>)
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3310      	adds	r3, #16
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d117      	bne.n	8001014 <main+0x5f0>
						{
							drawSprite(bunkerA,barrierA[j].barrierx,barrierA[j].barriery, 4, 4);
 8000fe4:	497e      	ldr	r1, [pc, #504]	; (80011e0 <main+0x7bc>)
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	497a      	ldr	r1, [pc, #488]	; (80011e0 <main+0x7bc>)
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3304      	adds	r3, #4
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	2304      	movs	r3, #4
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	2304      	movs	r3, #4
 800100c:	4601      	mov	r1, r0
 800100e:	4879      	ldr	r0, [pc, #484]	; (80011f4 <main+0x7d0>)
 8001010:	f7ff fbb4 	bl	800077c <drawSprite>

						}

						if(barrierA[j].health==1)
 8001014:	4972      	ldr	r1, [pc, #456]	; (80011e0 <main+0x7bc>)
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3310      	adds	r3, #16
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d117      	bne.n	800105a <main+0x636>
						{
							drawSprite(bunkerA2,barrierA[j].barrierx,barrierA[j].barriery, 4, 4);
 800102a:	496d      	ldr	r1, [pc, #436]	; (80011e0 <main+0x7bc>)
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	4969      	ldr	r1, [pc, #420]	; (80011e0 <main+0x7bc>)
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	3304      	adds	r3, #4
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2304      	movs	r3, #4
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2304      	movs	r3, #4
 8001052:	4601      	mov	r1, r0
 8001054:	4868      	ldr	r0, [pc, #416]	; (80011f8 <main+0x7d4>)
 8001056:	f7ff fb91 	bl	800077c <drawSprite>

						}

						//test if enemy missile hits barriers
						if((amissx-2<=barrierA[j].barrierx) && (barrierA[j].barrierx<=amissx+2) && (amissy-3<=barrierA[j].barriery) && (amissy+1>=barrierA[j].barriery))
 800105a:	4b68      	ldr	r3, [pc, #416]	; (80011fc <main+0x7d8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	1e99      	subs	r1, r3, #2
 8001060:	485f      	ldr	r0, [pc, #380]	; (80011e0 <main+0x7bc>)
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4613      	mov	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4403      	add	r3, r0
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4299      	cmp	r1, r3
 8001072:	dc44      	bgt.n	80010fe <main+0x6da>
 8001074:	495a      	ldr	r1, [pc, #360]	; (80011e0 <main+0x7bc>)
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <main+0x7d8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3302      	adds	r3, #2
 800108a:	429a      	cmp	r2, r3
 800108c:	dc37      	bgt.n	80010fe <main+0x6da>
 800108e:	4b5c      	ldr	r3, [pc, #368]	; (8001200 <main+0x7dc>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	1ed9      	subs	r1, r3, #3
 8001094:	4852      	ldr	r0, [pc, #328]	; (80011e0 <main+0x7bc>)
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4403      	add	r3, r0
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4299      	cmp	r1, r3
 80010a8:	dc29      	bgt.n	80010fe <main+0x6da>
 80010aa:	4b55      	ldr	r3, [pc, #340]	; (8001200 <main+0x7dc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c59      	adds	r1, r3, #1
 80010b0:	484b      	ldr	r0, [pc, #300]	; (80011e0 <main+0x7bc>)
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4403      	add	r3, r0
 80010be:	3304      	adds	r3, #4
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4299      	cmp	r1, r3
 80010c4:	db1b      	blt.n	80010fe <main+0x6da>
						{
							barrierA[j].health-=1;
 80010c6:	4946      	ldr	r1, [pc, #280]	; (80011e0 <main+0x7bc>)
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	440b      	add	r3, r1
 80010d4:	3310      	adds	r3, #16
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	1e59      	subs	r1, r3, #1
 80010da:	4841      	ldr	r0, [pc, #260]	; (80011e0 <main+0x7bc>)
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4403      	add	r3, r0
 80010e8:	3310      	adds	r3, #16
 80010ea:	6019      	str	r1, [r3, #0]
							ashot=0;
 80010ec:	4b45      	ldr	r3, [pc, #276]	; (8001204 <main+0x7e0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
							amissx=0;
 80010f2:	4b42      	ldr	r3, [pc, #264]	; (80011fc <main+0x7d8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
							amissy=0;
 80010f8:	4b41      	ldr	r3, [pc, #260]	; (8001200 <main+0x7dc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]


					}

					//test to see if player missile hits barrierB
					if(barrierB[j].health!=0)
 80010fe:	4942      	ldr	r1, [pc, #264]	; (8001208 <main+0x7e4>)
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	3310      	adds	r3, #16
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8105 	beq.w	8001320 <main+0x8fc>
					{
						if((Xlaser-2<=barrierB[j].barrierx) && (Xlaser+2>=barrierB[j].barrierx) && (Ylaser-1<=barrierB[j].barriery) && (Ylaser+3>=barrierB[j].barriery))
 8001116:	4b33      	ldr	r3, [pc, #204]	; (80011e4 <main+0x7c0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1e99      	subs	r1, r3, #2
 800111c:	483a      	ldr	r0, [pc, #232]	; (8001208 <main+0x7e4>)
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4403      	add	r3, r0
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4299      	cmp	r1, r3
 800112e:	dc47      	bgt.n	80011c0 <main+0x79c>
 8001130:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <main+0x7c0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1c99      	adds	r1, r3, #2
 8001136:	4834      	ldr	r0, [pc, #208]	; (8001208 <main+0x7e4>)
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4403      	add	r3, r0
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4299      	cmp	r1, r3
 8001148:	db3a      	blt.n	80011c0 <main+0x79c>
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <main+0x7c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1e59      	subs	r1, r3, #1
 8001150:	482d      	ldr	r0, [pc, #180]	; (8001208 <main+0x7e4>)
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4403      	add	r3, r0
 800115e:	3304      	adds	r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4299      	cmp	r1, r3
 8001164:	dc2c      	bgt.n	80011c0 <main+0x79c>
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <main+0x7c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1cd9      	adds	r1, r3, #3
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <main+0x7e4>)
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4403      	add	r3, r0
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4299      	cmp	r1, r3
 8001180:	db1e      	blt.n	80011c0 <main+0x79c>
						{

							barrierB[j].health-=1;
 8001182:	4921      	ldr	r1, [pc, #132]	; (8001208 <main+0x7e4>)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	3310      	adds	r3, #16
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	1e59      	subs	r1, r3, #1
 8001196:	481c      	ldr	r0, [pc, #112]	; (8001208 <main+0x7e4>)
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	3310      	adds	r3, #16
 80011a6:	6019      	str	r1, [r3, #0]

							fire=0;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <main+0x7c8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
							shot=0;
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <main+0x7cc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
							Xlaser=0;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <main+0x7c0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
							Ylaser=0;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <main+0x7c4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

						}
						if(barrierB[j].health==2)
 80011c0:	4911      	ldr	r1, [pc, #68]	; (8001208 <main+0x7e4>)
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4613      	mov	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	3310      	adds	r3, #16
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d12f      	bne.n	8001236 <main+0x812>
						{

							drawSprite(bunkerA,barrierB[j].barrierx,barrierB[j].barriery, 4, 4);
 80011d6:	490c      	ldr	r1, [pc, #48]	; (8001208 <main+0x7e4>)
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	4613      	mov	r3, r2
 80011dc:	e016      	b.n	800120c <main+0x7e8>
 80011de:	bf00      	nop
 80011e0:	2001d92c 	.word	0x2001d92c
 80011e4:	2001d8a4 	.word	0x2001d8a4
 80011e8:	2001d8c4 	.word	0x2001d8c4
 80011ec:	2001d0fc 	.word	0x2001d0fc
 80011f0:	2001d104 	.word	0x2001d104
 80011f4:	200001b8 	.word	0x200001b8
 80011f8:	200001c8 	.word	0x200001c8
 80011fc:	2001dcc8 	.word	0x2001dcc8
 8001200:	2001da20 	.word	0x2001da20
 8001204:	2001d10c 	.word	0x2001d10c
 8001208:	2001d754 	.word	0x2001d754
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	440b      	add	r3, r1
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	49b6      	ldr	r1, [pc, #728]	; (80014f0 <main+0xacc>)
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3304      	adds	r3, #4
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2304      	movs	r3, #4
 800122e:	4601      	mov	r1, r0
 8001230:	48b0      	ldr	r0, [pc, #704]	; (80014f4 <main+0xad0>)
 8001232:	f7ff faa3 	bl	800077c <drawSprite>

						}

						if(barrierB[j].health==1)
 8001236:	49ae      	ldr	r1, [pc, #696]	; (80014f0 <main+0xacc>)
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	3310      	adds	r3, #16
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d117      	bne.n	800127c <main+0x858>
						{

							drawSprite(bunkerA2,barrierB[j].barrierx,barrierB[j].barriery, 4, 4);
 800124c:	49a8      	ldr	r1, [pc, #672]	; (80014f0 <main+0xacc>)
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	49a4      	ldr	r1, [pc, #656]	; (80014f0 <main+0xacc>)
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	4613      	mov	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	3304      	adds	r3, #4
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	2304      	movs	r3, #4
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2304      	movs	r3, #4
 8001274:	4601      	mov	r1, r0
 8001276:	48a0      	ldr	r0, [pc, #640]	; (80014f8 <main+0xad4>)
 8001278:	f7ff fa80 	bl	800077c <drawSprite>

						}

						//test if enemy missile hits barrierB
						if((amissx-2<=barrierB[j].barrierx) && (barrierB[j].barrierx<=amissx+2) && (amissy-3<=barrierB[j].barriery) && (amissy+1>=barrierB[j].barriery))
 800127c:	4b9f      	ldr	r3, [pc, #636]	; (80014fc <main+0xad8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1e99      	subs	r1, r3, #2
 8001282:	489b      	ldr	r0, [pc, #620]	; (80014f0 <main+0xacc>)
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4403      	add	r3, r0
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4299      	cmp	r1, r3
 8001294:	dc44      	bgt.n	8001320 <main+0x8fc>
 8001296:	4996      	ldr	r1, [pc, #600]	; (80014f0 <main+0xacc>)
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b95      	ldr	r3, [pc, #596]	; (80014fc <main+0xad8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3302      	adds	r3, #2
 80012ac:	429a      	cmp	r2, r3
 80012ae:	dc37      	bgt.n	8001320 <main+0x8fc>
 80012b0:	4b93      	ldr	r3, [pc, #588]	; (8001500 <main+0xadc>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	1ed9      	subs	r1, r3, #3
 80012b6:	488e      	ldr	r0, [pc, #568]	; (80014f0 <main+0xacc>)
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4403      	add	r3, r0
 80012c4:	3304      	adds	r3, #4
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4299      	cmp	r1, r3
 80012ca:	dc29      	bgt.n	8001320 <main+0x8fc>
 80012cc:	4b8c      	ldr	r3, [pc, #560]	; (8001500 <main+0xadc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	1c59      	adds	r1, r3, #1
 80012d2:	4887      	ldr	r0, [pc, #540]	; (80014f0 <main+0xacc>)
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4403      	add	r3, r0
 80012e0:	3304      	adds	r3, #4
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4299      	cmp	r1, r3
 80012e6:	db1b      	blt.n	8001320 <main+0x8fc>
						{
							barrierB[j].health-=1;
 80012e8:	4981      	ldr	r1, [pc, #516]	; (80014f0 <main+0xacc>)
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	3310      	adds	r3, #16
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1e59      	subs	r1, r3, #1
 80012fc:	487c      	ldr	r0, [pc, #496]	; (80014f0 <main+0xacc>)
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4403      	add	r3, r0
 800130a:	3310      	adds	r3, #16
 800130c:	6019      	str	r1, [r3, #0]
							ashot=0;
 800130e:	4b7d      	ldr	r3, [pc, #500]	; (8001504 <main+0xae0>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
							amissx=0;
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <main+0xad8>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
							amissy=0;
 800131a:	4b79      	ldr	r3, [pc, #484]	; (8001500 <main+0xadc>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
						}
					}

					//test to see if player missile hits barrierC
					if(barrierC[j].health!=0)
 8001320:	4979      	ldr	r1, [pc, #484]	; (8001508 <main+0xae4>)
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3310      	adds	r3, #16
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8105 	beq.w	8001542 <main+0xb1e>
					{
						if((Xlaser-2<=barrierC[j].barrierx) && (Xlaser+2>=barrierC[j].barrierx) && (Ylaser-1<=barrierC[j].barriery) && (Ylaser+3>=barrierC[j].barriery))
 8001338:	4b74      	ldr	r3, [pc, #464]	; (800150c <main+0xae8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	1e99      	subs	r1, r3, #2
 800133e:	4872      	ldr	r0, [pc, #456]	; (8001508 <main+0xae4>)
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4403      	add	r3, r0
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4299      	cmp	r1, r3
 8001350:	dc47      	bgt.n	80013e2 <main+0x9be>
 8001352:	4b6e      	ldr	r3, [pc, #440]	; (800150c <main+0xae8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1c99      	adds	r1, r3, #2
 8001358:	486b      	ldr	r0, [pc, #428]	; (8001508 <main+0xae4>)
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4403      	add	r3, r0
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4299      	cmp	r1, r3
 800136a:	db3a      	blt.n	80013e2 <main+0x9be>
 800136c:	4b68      	ldr	r3, [pc, #416]	; (8001510 <main+0xaec>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1e59      	subs	r1, r3, #1
 8001372:	4865      	ldr	r0, [pc, #404]	; (8001508 <main+0xae4>)
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4403      	add	r3, r0
 8001380:	3304      	adds	r3, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4299      	cmp	r1, r3
 8001386:	dc2c      	bgt.n	80013e2 <main+0x9be>
 8001388:	4b61      	ldr	r3, [pc, #388]	; (8001510 <main+0xaec>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1cd9      	adds	r1, r3, #3
 800138e:	485e      	ldr	r0, [pc, #376]	; (8001508 <main+0xae4>)
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4403      	add	r3, r0
 800139c:	3304      	adds	r3, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4299      	cmp	r1, r3
 80013a2:	db1e      	blt.n	80013e2 <main+0x9be>
						{

							barrierC[j].health-=1;
 80013a4:	4958      	ldr	r1, [pc, #352]	; (8001508 <main+0xae4>)
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3310      	adds	r3, #16
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1e59      	subs	r1, r3, #1
 80013b8:	4853      	ldr	r0, [pc, #332]	; (8001508 <main+0xae4>)
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4403      	add	r3, r0
 80013c6:	3310      	adds	r3, #16
 80013c8:	6019      	str	r1, [r3, #0]

							fire=0;
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <main+0xaf0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
							shot=0;
 80013d0:	4b51      	ldr	r3, [pc, #324]	; (8001518 <main+0xaf4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
							Xlaser=0;
 80013d6:	4b4d      	ldr	r3, [pc, #308]	; (800150c <main+0xae8>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
							Ylaser=0;
 80013dc:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <main+0xaec>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]

						}
						if(barrierC[j].health==2)
 80013e2:	4949      	ldr	r1, [pc, #292]	; (8001508 <main+0xae4>)
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	440b      	add	r3, r1
 80013f0:	3310      	adds	r3, #16
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d117      	bne.n	8001428 <main+0xa04>
						{

							drawSprite(bunkerA,barrierC[j].barrierx,barrierC[j].barriery, 4, 4);
 80013f8:	4943      	ldr	r1, [pc, #268]	; (8001508 <main+0xae4>)
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	493f      	ldr	r1, [pc, #252]	; (8001508 <main+0xae4>)
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	3304      	adds	r3, #4
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2304      	movs	r3, #4
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2304      	movs	r3, #4
 8001420:	4601      	mov	r1, r0
 8001422:	4834      	ldr	r0, [pc, #208]	; (80014f4 <main+0xad0>)
 8001424:	f7ff f9aa 	bl	800077c <drawSprite>

						}

						if(barrierC[j].health==1)
 8001428:	4937      	ldr	r1, [pc, #220]	; (8001508 <main+0xae4>)
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	440b      	add	r3, r1
 8001436:	3310      	adds	r3, #16
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d117      	bne.n	800146e <main+0xa4a>
						{

							drawSprite(bunkerA2,barrierC[j].barrierx,barrierC[j].barriery, 4, 4);
 800143e:	4932      	ldr	r1, [pc, #200]	; (8001508 <main+0xae4>)
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	492e      	ldr	r1, [pc, #184]	; (8001508 <main+0xae4>)
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	3304      	adds	r3, #4
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2304      	movs	r3, #4
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2304      	movs	r3, #4
 8001466:	4601      	mov	r1, r0
 8001468:	4823      	ldr	r0, [pc, #140]	; (80014f8 <main+0xad4>)
 800146a:	f7ff f987 	bl	800077c <drawSprite>

						}

						//test if enemy missile hits barrierB
						if((amissx-2<=barrierC[j].barrierx) && (barrierC[j].barrierx<=amissx+2) && (amissy-3<=barrierC[j].barriery) && (amissy+1>=barrierC[j].barriery))	  	 				  	 				  	 			{
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <main+0xad8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1e99      	subs	r1, r3, #2
 8001474:	4824      	ldr	r0, [pc, #144]	; (8001508 <main+0xae4>)
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4403      	add	r3, r0
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4299      	cmp	r1, r3
 8001486:	dc5c      	bgt.n	8001542 <main+0xb1e>
 8001488:	491f      	ldr	r1, [pc, #124]	; (8001508 <main+0xae4>)
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <main+0xad8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	429a      	cmp	r2, r3
 80014a0:	dc4f      	bgt.n	8001542 <main+0xb1e>
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <main+0xadc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1ed9      	subs	r1, r3, #3
 80014a8:	4817      	ldr	r0, [pc, #92]	; (8001508 <main+0xae4>)
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	3304      	adds	r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4299      	cmp	r1, r3
 80014bc:	dc41      	bgt.n	8001542 <main+0xb1e>
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <main+0xadc>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	1c59      	adds	r1, r3, #1
 80014c4:	4810      	ldr	r0, [pc, #64]	; (8001508 <main+0xae4>)
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4403      	add	r3, r0
 80014d2:	3304      	adds	r3, #4
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4299      	cmp	r1, r3
 80014d8:	db33      	blt.n	8001542 <main+0xb1e>
							barrierC[j].health-=1;
 80014da:	490b      	ldr	r1, [pc, #44]	; (8001508 <main+0xae4>)
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3310      	adds	r3, #16
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e016      	b.n	800151c <main+0xaf8>
 80014ee:	bf00      	nop
 80014f0:	2001d754 	.word	0x2001d754
 80014f4:	200001b8 	.word	0x200001b8
 80014f8:	200001c8 	.word	0x200001c8
 80014fc:	2001dcc8 	.word	0x2001dcc8
 8001500:	2001da20 	.word	0x2001da20
 8001504:	2001d10c 	.word	0x2001d10c
 8001508:	2001d664 	.word	0x2001d664
 800150c:	2001d8a4 	.word	0x2001d8a4
 8001510:	2001d8c4 	.word	0x2001d8c4
 8001514:	2001d0fc 	.word	0x2001d0fc
 8001518:	2001d104 	.word	0x2001d104
 800151c:	1e59      	subs	r1, r3, #1
 800151e:	48a6      	ldr	r0, [pc, #664]	; (80017b8 <main+0xd94>)
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4403      	add	r3, r0
 800152c:	3310      	adds	r3, #16
 800152e:	6019      	str	r1, [r3, #0]
							ashot=0;
 8001530:	4ba2      	ldr	r3, [pc, #648]	; (80017bc <main+0xd98>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
							amissx=0;
 8001536:	4ba2      	ldr	r3, [pc, #648]	; (80017c0 <main+0xd9c>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
							amissy=0;
 800153c:	4ba1      	ldr	r3, [pc, #644]	; (80017c4 <main+0xda0>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
				for (int j = 0; j < 12; j++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2b0b      	cmp	r3, #11
 800154c:	f77f acde 	ble.w	8000f0c <main+0x4e8>
				}



				//increment x and y aliens and collision test with sides
				for(int k = 0; k<24 ; k++)
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	e0db      	b.n	800170e <main+0xcea>
				{
					if(alien[k].health!=0)
 8001556:	499c      	ldr	r1, [pc, #624]	; (80017c8 <main+0xda4>)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4613      	mov	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	440b      	add	r3, r1
 8001564:	3310      	adds	r3, #16
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80cd 	beq.w	8001708 <main+0xce4>
					{

						//test to see if player missile hits invader
						if((Xlaser-7<=alien[k].alienx) && (Xlaser+7>=alien[k].alienx) && (Ylaser-10<=alien[k].alieny) && (Ylaser+10>=alien[k].alieny))
 800156e:	4b97      	ldr	r3, [pc, #604]	; (80017cc <main+0xda8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	1fd9      	subs	r1, r3, #7
 8001574:	4894      	ldr	r0, [pc, #592]	; (80017c8 <main+0xda4>)
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	1a9b      	subs	r3, r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4299      	cmp	r1, r3
 8001586:	dc50      	bgt.n	800162a <main+0xc06>
 8001588:	4b90      	ldr	r3, [pc, #576]	; (80017cc <main+0xda8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	1dd9      	adds	r1, r3, #7
 800158e:	488e      	ldr	r0, [pc, #568]	; (80017c8 <main+0xda4>)
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	1a9b      	subs	r3, r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4403      	add	r3, r0
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4299      	cmp	r1, r3
 80015a0:	db43      	blt.n	800162a <main+0xc06>
 80015a2:	4b8b      	ldr	r3, [pc, #556]	; (80017d0 <main+0xdac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f1a3 010a 	sub.w	r1, r3, #10
 80015aa:	4887      	ldr	r0, [pc, #540]	; (80017c8 <main+0xda4>)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4613      	mov	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	1a9b      	subs	r3, r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4403      	add	r3, r0
 80015b8:	3304      	adds	r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4299      	cmp	r1, r3
 80015be:	dc34      	bgt.n	800162a <main+0xc06>
 80015c0:	4b83      	ldr	r3, [pc, #524]	; (80017d0 <main+0xdac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f103 010a 	add.w	r1, r3, #10
 80015c8:	487f      	ldr	r0, [pc, #508]	; (80017c8 <main+0xda4>)
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	1a9b      	subs	r3, r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4403      	add	r3, r0
 80015d6:	3304      	adds	r3, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4299      	cmp	r1, r3
 80015dc:	db25      	blt.n	800162a <main+0xc06>
						{

							alien[k].health=0;
 80015de:	497a      	ldr	r1, [pc, #488]	; (80017c8 <main+0xda4>)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3310      	adds	r3, #16
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
							HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)hitaudio, AUDIOLEN2);
 80015f2:	f641 12bb 	movw	r2, #6587	; 0x19bb
 80015f6:	4977      	ldr	r1, [pc, #476]	; (80017d4 <main+0xdb0>)
 80015f8:	4877      	ldr	r0, [pc, #476]	; (80017d8 <main+0xdb4>)
 80015fa:	f001 fced 	bl	8002fd8 <HAL_I2S_Transmit_DMA>
							fire=0;
 80015fe:	4b77      	ldr	r3, [pc, #476]	; (80017dc <main+0xdb8>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
							shot=0;
 8001604:	4b76      	ldr	r3, [pc, #472]	; (80017e0 <main+0xdbc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
							score+=10;
 800160a:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <main+0xdc0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	330a      	adds	r3, #10
 8001610:	4a74      	ldr	r2, [pc, #464]	; (80017e4 <main+0xdc0>)
 8001612:	6013      	str	r3, [r2, #0]
							Xlaser=0;
 8001614:	4b6d      	ldr	r3, [pc, #436]	; (80017cc <main+0xda8>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
							Ylaser=0;
 800161a:	4b6d      	ldr	r3, [pc, #436]	; (80017d0 <main+0xdac>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
							aliensize--;
 8001620:	4b71      	ldr	r3, [pc, #452]	; (80017e8 <main+0xdc4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3b01      	subs	r3, #1
 8001626:	4a70      	ldr	r2, [pc, #448]	; (80017e8 <main+0xdc4>)
 8001628:	6013      	str	r3, [r2, #0]
						}

						//tests to see if enemy missile hits player

						if((amissx-20<=Xpos) && (Xpos<=amissx+5) && (amissy-2<=Ypos) && (amissy+2>=Ypos))
 800162a:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <main+0xd9c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1a3 0214 	sub.w	r2, r3, #20
 8001632:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <main+0xdc8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	dc39      	bgt.n	80016ae <main+0xc8a>
 800163a:	4b61      	ldr	r3, [pc, #388]	; (80017c0 <main+0xd9c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1d5a      	adds	r2, r3, #5
 8001640:	4b6a      	ldr	r3, [pc, #424]	; (80017ec <main+0xdc8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	db32      	blt.n	80016ae <main+0xc8a>
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <main+0xda0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	1e9a      	subs	r2, r3, #2
 800164e:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <main+0xdcc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	dc2b      	bgt.n	80016ae <main+0xc8a>
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <main+0xda0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1c9a      	adds	r2, r3, #2
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <main+0xdcc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	db24      	blt.n	80016ae <main+0xc8a>
						{
							ashot=0;
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <main+0xd98>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
							amissx=0;
 800166a:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <main+0xd9c>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
							amissy=0;
 8001670:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <main+0xda0>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
							lives=lives-1;
 8001676:	4b5f      	ldr	r3, [pc, #380]	; (80017f4 <main+0xdd0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3b01      	subs	r3, #1
 800167c:	4a5d      	ldr	r2, [pc, #372]	; (80017f4 <main+0xdd0>)
 800167e:	6013      	str	r3, [r2, #0]
							drawSprite(shooterdead, Xpos,Ypos, 32, 31);
 8001680:	4b5a      	ldr	r3, [pc, #360]	; (80017ec <main+0xdc8>)
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	4b5a      	ldr	r3, [pc, #360]	; (80017f0 <main+0xdcc>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	231f      	movs	r3, #31
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2320      	movs	r3, #32
 800168e:	485a      	ldr	r0, [pc, #360]	; (80017f8 <main+0xdd4>)
 8001690:	f7ff f874 	bl	800077c <drawSprite>
							HAL_Delay(15);
 8001694:	200f      	movs	r0, #15
 8001696:	f000 fd0b 	bl	80020b0 <HAL_Delay>

							if(lives>1){
 800169a:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <main+0xdd0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	dd05      	ble.n	80016ae <main+0xc8a>
								HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)deadaudio, AUDIOLEN4);
 80016a2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80016a6:	4955      	ldr	r1, [pc, #340]	; (80017fc <main+0xdd8>)
 80016a8:	484b      	ldr	r0, [pc, #300]	; (80017d8 <main+0xdb4>)
 80016aa:	f001 fc95 	bl	8002fd8 <HAL_I2S_Transmit_DMA>
							}
						}

						//test to see if invaders touch player
						if(alien[k].alieny+10>Ypos)
 80016ae:	4946      	ldr	r1, [pc, #280]	; (80017c8 <main+0xda4>)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3304      	adds	r3, #4
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f103 020a 	add.w	r2, r3, #10
 80016c4:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <main+0xdcc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dd05      	ble.n	80016d8 <main+0xcb4>
						{

							bottom=1;
 80016cc:	4b4c      	ldr	r3, [pc, #304]	; (8001800 <main+0xddc>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
							lives=0;
 80016d2:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <main+0xdd0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

						}


						drawSprite(test3, alien[k].alienx,alien[k].alieny, 12, 8);
 80016d8:	493b      	ldr	r1, [pc, #236]	; (80017c8 <main+0xda4>)
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4613      	mov	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	4937      	ldr	r1, [pc, #220]	; (80017c8 <main+0xda4>)
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4613      	mov	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	3304      	adds	r3, #4
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2308      	movs	r3, #8
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	230c      	movs	r3, #12
 8001700:	4601      	mov	r1, r0
 8001702:	4840      	ldr	r0, [pc, #256]	; (8001804 <main+0xde0>)
 8001704:	f7ff f83a 	bl	800077c <drawSprite>
				for(int k = 0; k<24 ; k++)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	3301      	adds	r3, #1
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b17      	cmp	r3, #23
 8001712:	f77f af20 	ble.w	8001556 <main+0xb32>

					}

				}

				int down = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
				for (int j = 0;j<24;j++)
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	e042      	b.n	80017a6 <main+0xd82>
				{

					if((alien[j].alienx+amove>305)||(alien[j].alienx+amove<10))
 8001720:	4929      	ldr	r1, [pc, #164]	; (80017c8 <main+0xda4>)
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <main+0xde4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4413      	add	r3, r2
 8001736:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800173a:	da0c      	bge.n	8001756 <main+0xd32>
 800173c:	4922      	ldr	r1, [pc, #136]	; (80017c8 <main+0xda4>)
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4613      	mov	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	1a9b      	subs	r3, r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <main+0xde4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4413      	add	r3, r2
 8001752:	2b09      	cmp	r3, #9
 8001754:	dc24      	bgt.n	80017a0 <main+0xd7c>
					{
						amove*=-1;
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <main+0xde4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	425b      	negs	r3, r3
 800175c:	4a2a      	ldr	r2, [pc, #168]	; (8001808 <main+0xde4>)
 800175e:	6013      	str	r3, [r2, #0]
						down = 1;
 8001760:	2301      	movs	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]

						for(int i = 0; i<24 ; i++)
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	e016      	b.n	8001798 <main+0xd74>
						{
							alien[i].alieny += 10;
 800176a:	4917      	ldr	r1, [pc, #92]	; (80017c8 <main+0xda4>)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	1a9b      	subs	r3, r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	3304      	adds	r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f103 010a 	add.w	r1, r3, #10
 8001780:	4811      	ldr	r0, [pc, #68]	; (80017c8 <main+0xda4>)
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4403      	add	r3, r0
 800178e:	3304      	adds	r3, #4
 8001790:	6019      	str	r1, [r3, #0]
						for(int i = 0; i<24 ; i++)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3301      	adds	r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b17      	cmp	r3, #23
 800179c:	dde5      	ble.n	800176a <main+0xd46>

						}
						break;
 800179e:	e005      	b.n	80017ac <main+0xd88>
				for (int j = 0;j<24;j++)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b17      	cmp	r3, #23
 80017aa:	ddb9      	ble.n	8001720 <main+0xcfc>
					}


				}
				if(down==0)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d145      	bne.n	800183e <main+0xe1a>
				{
					for(int i = 0; i<24 ; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	e03f      	b.n	8001838 <main+0xe14>
 80017b8:	2001d664 	.word	0x2001d664
 80017bc:	2001d10c 	.word	0x2001d10c
 80017c0:	2001dcc8 	.word	0x2001dcc8
 80017c4:	2001da20 	.word	0x2001da20
 80017c8:	2001da24 	.word	0x2001da24
 80017cc:	2001d8a4 	.word	0x2001d8a4
 80017d0:	2001d8c4 	.word	0x2001d8c4
 80017d4:	0805dae4 	.word	0x0805dae4
 80017d8:	2001dce4 	.word	0x2001dce4
 80017dc:	2001d0fc 	.word	0x2001d0fc
 80017e0:	2001d104 	.word	0x2001d104
 80017e4:	2001d100 	.word	0x2001d100
 80017e8:	2001d05c 	.word	0x2001d05c
 80017ec:	2001d060 	.word	0x2001d060
 80017f0:	2001d064 	.word	0x2001d064
 80017f4:	2001d058 	.word	0x2001d058
 80017f8:	20000670 	.word	0x20000670
 80017fc:	0801811c 	.word	0x0801811c
 8001800:	2001d108 	.word	0x2001d108
 8001804:	20000158 	.word	0x20000158
 8001808:	2001d054 	.word	0x2001d054
					{
						alien[i].alienx=alien[i].alienx + amove;
 800180c:	491d      	ldr	r1, [pc, #116]	; (8001884 <main+0xe60>)
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <main+0xe64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	18d1      	adds	r1, r2, r3
 8001822:	4818      	ldr	r0, [pc, #96]	; (8001884 <main+0xe60>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	4613      	mov	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4403      	add	r3, r0
 8001830:	6019      	str	r1, [r3, #0]
					for(int i = 0; i<24 ; i++)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2b17      	cmp	r3, #23
 800183c:	dde6      	ble.n	800180c <main+0xde8>


			}
		}

		if ((bottom==1)||(lives==0))
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <main+0xe68>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d004      	beq.n	8001850 <main+0xe2c>
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <main+0xe6c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f47f aac7 	bne.w	8000dde <main+0x3ba>
		{
			clearScreen();
 8001850:	f7ff f81e 	bl	8000890 <clearScreen>
			drawSprite(gameover,20,8, 280, 184);
 8001854:	23b8      	movs	r3, #184	; 0xb8
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f44f 738c 	mov.w	r3, #280	; 0x118
 800185c:	2208      	movs	r2, #8
 800185e:	2114      	movs	r1, #20
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <main+0xe70>)
 8001862:	f7fe ff8b 	bl	800077c <drawSprite>
			HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t*)gameoveraudio, AUDIOLEN3);
 8001866:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 800186a:	490b      	ldr	r1, [pc, #44]	; (8001898 <main+0xe74>)
 800186c:	480b      	ldr	r0, [pc, #44]	; (800189c <main+0xe78>)
 800186e:	f001 fbb3 	bl	8002fd8 <HAL_I2S_Transmit_DMA>
			bottom=0;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <main+0xe68>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
			lives=-1;
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <main+0xe6c>)
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	601a      	str	r2, [r3, #0]
		if((!bottom)&&(alien!=0)&&(lives>0))
 8001880:	f7ff baad 	b.w	8000dde <main+0x3ba>
 8001884:	2001da24 	.word	0x2001da24
 8001888:	2001d054 	.word	0x2001d054
 800188c:	2001d108 	.word	0x2001d108
 8001890:	2001d058 	.word	0x2001d058
 8001894:	20010470 	.word	0x20010470
 8001898:	08039c40 	.word	0x08039c40
 800189c:	2001dce4 	.word	0x2001dce4

080018a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09a      	sub	sp, #104	; 0x68
 80018a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018aa:	2230      	movs	r2, #48	; 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fd78 	bl	80043a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
 80018d4:	615a      	str	r2, [r3, #20]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(16);
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <SystemClock_Config+0x108>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <SystemClock_Config+0x108>)
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	6053      	str	r3, [r2, #4]
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <SystemClock_Config+0x108>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a2f      	ldr	r2, [pc, #188]	; (80019a8 <SystemClock_Config+0x108>)
 80018ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018f0:	6053      	str	r3, [r2, #4]
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <SystemClock_Config+0x108>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a2b      	ldr	r2, [pc, #172]	; (80019a8 <SystemClock_Config+0x108>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <SystemClock_Config+0x108>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <SystemClock_Config+0x10c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a25      	ldr	r2, [pc, #148]	; (80019ac <SystemClock_Config+0x10c>)
 8001918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b23      	ldr	r3, [pc, #140]	; (80019ac <SystemClock_Config+0x10c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800192a:	2302      	movs	r3, #2
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192e:	2301      	movs	r3, #1
 8001930:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001932:	2310      	movs	r3, #16
 8001934:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001936:	2300      	movs	r3, #0
 8001938:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800193a:	2300      	movs	r3, #0
 800193c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001942:	4618      	mov	r0, r3
 8001944:	f001 ffae 	bl	80038a4 <HAL_RCC_OscConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0xb2>
	{
		Error_Handler();
 800194e:	f000 f979 	bl	8001c44 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001952:	230f      	movs	r3, #15
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fa09 	bl	8003d84 <HAL_RCC_ClockConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0xdc>
	{
		Error_Handler();
 8001978:	f000 f964 	bl	8001c44 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800197c:	2301      	movs	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001980:	23c0      	movs	r3, #192	; 0xc0
 8001982:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001984:	2310      	movs	r3, #16
 8001986:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fb8f 	bl	80040b4 <HAL_RCCEx_PeriphCLKConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <SystemClock_Config+0x100>
	{
		Error_Handler();
 800199c:	f000 f952 	bl	8001c44 <Error_Handler>
	}
}
 80019a0:	bf00      	nop
 80019a2:	3768      	adds	r7, #104	; 0x68
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000

080019b0 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <MX_I2S3_Init+0x58>)
 80019b8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80019da:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_I2S3_Init+0x54>)
 80019f0:	f001 f9b2 	bl	8002d58 <HAL_I2S_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 80019fa:	f000 f923 	bl	8001c44 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2001dce4 	.word	0x2001dce4
 8001a08:	40003c00 	.word	0x40003c00

08001a0c <MX_DMA_Init>:
 * Enable DMA controller clock
 * Configure DMA for memory to memory transfers
 *   hdma_memtomem_dma2_stream0
 */
static void MX_DMA_Init(void) 
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <MX_DMA_Init+0xcc>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <MX_DMA_Init+0xcc>)
 8001a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <MX_DMA_Init+0xcc>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <MX_DMA_Init+0xcc>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a28      	ldr	r2, [pc, #160]	; (8001ad8 <MX_DMA_Init+0xcc>)
 8001a38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_DMA_Init+0xcc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

	/* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
	hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a4c:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <MX_DMA_Init+0xd4>)
 8001a4e:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a58:	2280      	movs	r2, #128	; 0x80
 8001a5a:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a62:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6a:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a72:	615a      	str	r2, [r3, #20]
	hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a74:	4b19      	ldr	r3, [pc, #100]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7a:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8001a82:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
	hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
	hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a90:	2203      	movs	r2, #3
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
	hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_DMA_Init+0xd0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001aa0:	480e      	ldr	r0, [pc, #56]	; (8001adc <MX_DMA_Init+0xd0>)
 8001aa2:	f000 fc39 	bl	8002318 <HAL_DMA_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_DMA_Init+0xa4>
	{
		Error_Handler( );
 8001aac:	f000 f8ca 	bl	8001c44 <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2010      	movs	r0, #16
 8001ab6:	f000 fbf8 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001aba:	2010      	movs	r0, #16
 8001abc:	f000 fc11 	bl	80022e2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	2038      	movs	r0, #56	; 0x38
 8001ac6:	f000 fbf0 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001aca:	2038      	movs	r0, #56	; 0x38
 8001acc:	f000 fc09 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	2001d844 	.word	0x2001d844
 8001ae0:	40026410 	.word	0x40026410

08001ae4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
 8001af8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b48      	ldr	r3, [pc, #288]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a43      	ldr	r2, [pc, #268]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a3c      	ldr	r2, [pc, #240]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a35      	ldr	r2, [pc, #212]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b33      	ldr	r3, [pc, #204]	; (8001c2c <MX_GPIO_Init+0x148>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pins : PA0 PA1 PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b6a:	230f      	movs	r3, #15
 8001b6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b6e:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <MX_GPIO_Init+0x14c>)
 8001b70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f107 0314 	add.w	r3, r7, #20
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	482d      	ldr	r0, [pc, #180]	; (8001c34 <MX_GPIO_Init+0x150>)
 8001b7e:	f000 ff39 	bl	80029f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD10 PD11 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b82:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <MX_GPIO_Init+0x154>)
 8001b8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4829      	ldr	r0, [pc, #164]	; (8001c3c <MX_GPIO_Init+0x158>)
 8001b98:	f000 ff2c 	bl	80029f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ba0:	4b23      	ldr	r3, [pc, #140]	; (8001c30 <MX_GPIO_Init+0x14c>)
 8001ba2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4824      	ldr	r0, [pc, #144]	; (8001c40 <MX_GPIO_Init+0x15c>)
 8001bb0:	f000 ff20 	bl	80029f4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2006      	movs	r0, #6
 8001bba:	f000 fb76 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bbe:	2006      	movs	r0, #6
 8001bc0:	f000 fb8f 	bl	80022e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2007      	movs	r0, #7
 8001bca:	f000 fb6e 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001bce:	2007      	movs	r0, #7
 8001bd0:	f000 fb87 	bl	80022e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	2008      	movs	r0, #8
 8001bda:	f000 fb66 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001bde:	2008      	movs	r0, #8
 8001be0:	f000 fb7f 	bl	80022e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	2009      	movs	r0, #9
 8001bea:	f000 fb5e 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001bee:	2009      	movs	r0, #9
 8001bf0:	f000 fb77 	bl	80022e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	200a      	movs	r0, #10
 8001bfa:	f000 fb56 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f000 fb6f 	bl	80022e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2017      	movs	r0, #23
 8001c0a:	f000 fb4e 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c0e:	2017      	movs	r0, #23
 8001c10:	f000 fb67 	bl	80022e2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2028      	movs	r0, #40	; 0x28
 8001c1a:	f000 fb46 	bl	80022aa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c1e:	2028      	movs	r0, #40	; 0x28
 8001c20:	f000 fb5f 	bl	80022e2 <HAL_NVIC_EnableIRQ>

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	10110000 	.word	0x10110000
 8001c34:	40020000 	.word	0x40020000
 8001c38:	10310000 	.word	0x10310000
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40020400 	.word	0x40020400

08001c44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	607b      	str	r3, [r7, #4]
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a08      	ldr	r2, [pc, #32]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HAL_I2S_MspInit+0x120>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d179      	bne.n	8001dba <HAL_I2S_MspInit+0x116>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a3e      	ldr	r2, [pc, #248]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a37      	ldr	r2, [pc, #220]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a30      	ldr	r2, [pc, #192]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_I2S_MspInit+0x124>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration    
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4825      	ldr	r0, [pc, #148]	; (8001dcc <HAL_I2S_MspInit+0x128>)
 8001d36:	f000 fe5d 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	481e      	ldr	r0, [pc, #120]	; (8001dd0 <HAL_I2S_MspInit+0x12c>)
 8001d58:	f000 fe4c 	bl	80029f4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <HAL_I2S_MspInit+0x134>)
 8001d60:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d82:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001da0:	f000 faba 	bl	8002318 <HAL_DMA_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2S_MspInit+0x10a>
    {
      Error_Handler();
 8001daa:	f7ff ff4b 	bl	8001c44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a08      	ldr	r2, [pc, #32]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001db2:	639a      	str	r2, [r3, #56]	; 0x38
 8001db4:	4a07      	ldr	r2, [pc, #28]	; (8001dd4 <HAL_I2S_MspInit+0x130>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40003c00 	.word	0x40003c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	2001d8cc 	.word	0x2001d8cc
 8001dd8:	40026088 	.word	0x40026088

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e30:	f000 f91e 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f000 ff73 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e4a:	2002      	movs	r0, #2
 8001e4c:	f000 ff6c 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e58:	2004      	movs	r0, #4
 8001e5a:	f000 ff65 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e66:	2008      	movs	r0, #8
 8001e68:	f000 ff5e 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
refresh=1;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <EXTI4_IRQHandler+0x14>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e7a:	2010      	movs	r0, #16
 8001e7c:	f000 ff54 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2001d0f4 	.word	0x2001d0f4

08001e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <DMA1_Stream5_IRQHandler+0x10>)
 8001e8e:	f000 fb49 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2001d8cc 	.word	0x2001d8cc

08001e9c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ea0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ea4:	f000 ff40 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001ea8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001eac:	f000 ff3c 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001eb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ebc:	f000 ff34 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ec0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ec4:	f000 ff30 	bl	8002d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
	if(hdma_memtomem_dma2_stream0.Instance->NDTR == 0)
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <DMA2_Stream0_IRQHandler+0x20>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d102      	bne.n	8001ee0 <DMA2_Stream0_IRQHandler+0x14>
	{
	cleardone=1;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <DMA2_Stream0_IRQHandler+0x24>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <DMA2_Stream0_IRQHandler+0x20>)
 8001ee2:	f000 fb1f 	bl	8002524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	2001d844 	.word	0x2001d844
 8001ef0:	2001d0f5 	.word	0x2001d0f5

08001ef4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x50>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <_sbrk+0x16>
		heap_end = &end;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <_sbrk+0x50>)
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <_sbrk+0x54>)
 8001f08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <_sbrk+0x50>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <_sbrk+0x50>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4413      	add	r3, r2
 8001f18:	466a      	mov	r2, sp
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d907      	bls.n	8001f2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f1e:	f002 fa17 	bl	8004350 <__errno>
 8001f22:	4602      	mov	r2, r0
 8001f24:	230c      	movs	r3, #12
 8001f26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	e006      	b.n	8001f3c <_sbrk+0x48>
	}

	heap_end += incr;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <_sbrk+0x50>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <_sbrk+0x50>)
 8001f38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	2001d118 	.word	0x2001d118
 8001f48:	2001dd38 	.word	0x2001dd38

08001f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <SystemInit+0x28>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <SystemInit+0x28>)
 8001f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SystemInit+0x28>)
 8001f62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f66:	609a      	str	r2, [r3, #8]
#endif
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f7e:	e003      	b.n	8001f88 <LoopCopyDataInit>

08001f80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f86:	3104      	adds	r1, #4

08001f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f88:	480b      	ldr	r0, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f90:	d3f6      	bcc.n	8001f80 <CopyDataInit>
  ldr  r2, =_sbss
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f94:	e002      	b.n	8001f9c <LoopFillZerobss>

08001f96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f98:	f842 3b04 	str.w	r3, [r2], #4

08001f9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fa0:	d3f9      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fa2:	f7ff ffd3 	bl	8001f4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f002 f9d9 	bl	800435c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7fe fd3b 	bl	8000a24 <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fb4:	08060e84 	.word	0x08060e84
  ldr  r0, =_sdata
 8001fb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fbc:	2001d0d8 	.word	0x2001d0d8
  ldr  r2, =_sbss
 8001fc0:	2001d0d8 	.word	0x2001d0d8
  ldr  r3, = _ebss
 8001fc4:	2001dd34 	.word	0x2001dd34

08001fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_Init+0x40>)
 8001fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_Init+0x40>)
 8001fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x40>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 f94d 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fe28 	bl	8001c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f965 	bl	80022fe <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295
 800204c:	f000 f92d 	bl	80022aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2001d068 	.word	0x2001d068
 8002068:	2001d070 	.word	0x2001d070
 800206c:	2001d06c 	.word	0x2001d06c

08002070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <HAL_IncTick+0x20>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x24>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_IncTick+0x24>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	2001d070 	.word	0x2001d070
 8002094:	2001dd2c 	.word	0x2001dd2c

08002098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return uwTick;
 800209c:	4b03      	ldr	r3, [pc, #12]	; (80020ac <HAL_GetTick+0x14>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	2001dd2c 	.word	0x2001dd2c

080020b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b8:	f7ff ffee 	bl	8002098 <HAL_GetTick>
 80020bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d005      	beq.n	80020d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_Delay+0x40>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4413      	add	r3, r2
 80020d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffde 	bl	8002098 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d8f7      	bhi.n	80020d8 <HAL_Delay+0x28>
  {
  }
}
 80020e8:	bf00      	nop
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	2001d070 	.word	0x2001d070

080020f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002110:	4013      	ands	r3, r2
 8002112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800211c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002126:	4a04      	ldr	r2, [pc, #16]	; (8002138 <__NVIC_SetPriorityGrouping+0x44>)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	60d3      	str	r3, [r2, #12]
}
 800212c:	bf00      	nop
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <__NVIC_GetPriorityGrouping+0x18>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	f003 0307 	and.w	r3, r3, #7
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0b      	blt.n	8002182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f003 021f 	and.w	r2, r3, #31
 8002170:	4907      	ldr	r1, [pc, #28]	; (8002190 <__NVIC_EnableIRQ+0x38>)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	2001      	movs	r0, #1
 800217a:	fa00 f202 	lsl.w	r2, r0, r2
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff29 	bl	80020f4 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff3e 	bl	800213c <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff31 	bl	8002158 <__NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffa2 	bl	8002250 <SysTick_Config>
 800230c:	4603      	mov	r3, r0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff feb8 	bl	8002098 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e099      	b.n	8002468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002354:	e00f      	b.n	8002376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002356:	f7ff fe9f 	bl	8002098 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b05      	cmp	r3, #5
 8002362:	d908      	bls.n	8002376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e078      	b.n	8002468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e8      	bne.n	8002356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_DMA_Init+0x158>)
 8002390:	4013      	ands	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4313      	orrs	r3, r2
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b04      	cmp	r3, #4
 8002408:	d117      	bne.n	800243a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa6f 	bl	8002900 <DMA_CheckFifoParam>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002436:	2301      	movs	r3, #1
 8002438:	e016      	b.n	8002468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa26 	bl	8002894 <DMA_CalcBaseAndBitshift>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	f010803f 	.word	0xf010803f

08002474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_DMA_Start_IT+0x26>
 8002496:	2302      	movs	r3, #2
 8002498:	e040      	b.n	800251c <HAL_DMA_Start_IT+0xa8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12f      	bne.n	800250e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f9b8 	bl	8002838 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	223f      	movs	r2, #63	; 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0216 	orr.w	r2, r2, #22
 80024e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0208 	orr.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e005      	b.n	800251a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002530:	4b92      	ldr	r3, [pc, #584]	; (800277c <HAL_DMA_IRQHandler+0x258>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a92      	ldr	r2, [pc, #584]	; (8002780 <HAL_DMA_IRQHandler+0x25c>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0a9b      	lsrs	r3, r3, #10
 800253c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2208      	movs	r2, #8
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01a      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0204 	bic.w	r2, r2, #4
 8002576:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2208      	movs	r2, #8
 800257e:	409a      	lsls	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f043 0201 	orr.w	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002594:	2201      	movs	r2, #1
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d012      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b2:	2201      	movs	r2, #1
 80025b4:	409a      	lsls	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f043 0202 	orr.w	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ca:	2204      	movs	r2, #4
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d012      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	2204      	movs	r2, #4
 80025ea:	409a      	lsls	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f4:	f043 0204 	orr.w	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	2210      	movs	r2, #16
 8002602:	409a      	lsls	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d043      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d03c      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	2210      	movs	r2, #16
 8002620:	409a      	lsls	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d018      	beq.n	8002666 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	4798      	blx	r3
 8002652:	e01f      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01b      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e016      	b.n	8002694 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0208 	bic.w	r2, r2, #8
 8002682:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2220      	movs	r2, #32
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 808e 	beq.w	80027c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8086 	beq.w	80027c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	2220      	movs	r2, #32
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d136      	bne.n	800273c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0216 	bic.w	r2, r2, #22
 80026dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_DMA_IRQHandler+0x1da>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d007      	beq.n	800270e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0208 	bic.w	r2, r2, #8
 800270c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	223f      	movs	r2, #63	; 0x3f
 8002714:	409a      	lsls	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272e:	2b00      	cmp	r3, #0
 8002730:	d07d      	beq.n	800282e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
        }
        return;
 800273a:	e078      	b.n	800282e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d108      	bne.n	800276a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	2b00      	cmp	r3, #0
 800275e:	d030      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
 8002768:	e02b      	b.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	2b00      	cmp	r3, #0
 8002770:	d027      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
 800277a:	e022      	b.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
 800277c:	2001d068 	.word	0x2001d068
 8002780:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10f      	bne.n	80027b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0210 	bic.w	r2, r2, #16
 80027a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d032      	beq.n	8002830 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d022      	beq.n	800281c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3301      	adds	r3, #1
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d307      	bcc.n	800280a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f2      	bne.n	80027ee <HAL_DMA_IRQHandler+0x2ca>
 8002808:	e000      	b.n	800280c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800280a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e000      	b.n	8002830 <HAL_DMA_IRQHandler+0x30c>
        return;
 800282e:	bf00      	nop
    }
  }
}
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop

08002838 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002854:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d108      	bne.n	8002878 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002876:	e007      	b.n	8002888 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	60da      	str	r2, [r3, #12]
}
 8002888:	bf00      	nop
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3b10      	subs	r3, #16
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <DMA_CalcBaseAndBitshift+0x64>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <DMA_CalcBaseAndBitshift+0x68>)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d909      	bls.n	80028d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028ca:	f023 0303 	bic.w	r3, r3, #3
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	659a      	str	r2, [r3, #88]	; 0x58
 80028d4:	e007      	b.n	80028e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80028de:	f023 0303 	bic.w	r3, r3, #3
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	aaaaaaab 	.word	0xaaaaaaab
 80028fc:	08060e6c 	.word	0x08060e6c

08002900 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11f      	bne.n	800295a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d855      	bhi.n	80029cc <DMA_CheckFifoParam+0xcc>
 8002920:	a201      	add	r2, pc, #4	; (adr r2, 8002928 <DMA_CheckFifoParam+0x28>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	08002939 	.word	0x08002939
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002939 	.word	0x08002939
 8002934:	080029cd 	.word	0x080029cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d045      	beq.n	80029d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002948:	e042      	b.n	80029d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002952:	d13f      	bne.n	80029d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002958:	e03c      	b.n	80029d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002962:	d121      	bne.n	80029a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d836      	bhi.n	80029d8 <DMA_CheckFifoParam+0xd8>
 800296a:	a201      	add	r2, pc, #4	; (adr r2, 8002970 <DMA_CheckFifoParam+0x70>)
 800296c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002970:	08002981 	.word	0x08002981
 8002974:	08002987 	.word	0x08002987
 8002978:	08002981 	.word	0x08002981
 800297c:	08002999 	.word	0x08002999
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      break;
 8002984:	e02f      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002996:	e021      	b.n	80029dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029a0:	d11e      	bne.n	80029e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029a6:	e01b      	b.n	80029e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d902      	bls.n	80029b4 <DMA_CheckFifoParam+0xb4>
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d003      	beq.n	80029ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b2:	e018      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      break;
 80029b8:	e015      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00e      	beq.n	80029e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
      break;
 80029ca:	e00b      	b.n	80029e4 <DMA_CheckFifoParam+0xe4>
      break;
 80029cc:	bf00      	nop
 80029ce:	e00a      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029d0:	bf00      	nop
 80029d2:	e008      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029d4:	bf00      	nop
 80029d6:	e006      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029d8:	bf00      	nop
 80029da:	e004      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <DMA_CheckFifoParam+0xe6>
      break;
 80029e4:	bf00      	nop
    }
  } 
  
  return status; 
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e159      	b.n	8002cc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8148 	bne.w	8002cbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d00b      	beq.n	8002a4e <HAL_GPIO_Init+0x5a>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a42:	2b11      	cmp	r3, #17
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b12      	cmp	r3, #18
 8002a4c:	d130      	bne.n	8002ab0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4013      	ands	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	2201      	movs	r2, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 0201 	and.w	r2, r3, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0xfc>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b12      	cmp	r3, #18
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a2 	beq.w	8002cbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b56      	ldr	r3, [pc, #344]	; (8002cd8 <HAL_GPIO_Init+0x2e4>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b82:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_GPIO_Init+0x2e4>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	; 0x44
 8002b8a:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_GPIO_Init+0x2e4>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	; (8002ce0 <HAL_GPIO_Init+0x2ec>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x202>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a47      	ldr	r2, [pc, #284]	; (8002ce4 <HAL_GPIO_Init+0x2f0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x1fe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a46      	ldr	r2, [pc, #280]	; (8002ce8 <HAL_GPIO_Init+0x2f4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x1fa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a45      	ldr	r2, [pc, #276]	; (8002cec <HAL_GPIO_Init+0x2f8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x1f6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a44      	ldr	r2, [pc, #272]	; (8002cf0 <HAL_GPIO_Init+0x2fc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x1f2>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c08:	4934      	ldr	r1, [pc, #208]	; (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3a:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c64:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c8e:	4a19      	ldr	r2, [pc, #100]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <HAL_GPIO_Init+0x300>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	f67f aea2 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3724      	adds	r7, #36	; 0x24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	40020c00 	.word	0x40020c00
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	887b      	ldrh	r3, [r7, #2]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d002      	beq.n	8002d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	e001      	b.n	8002d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d006      	beq.n	8002d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc5a 	bl	8000600 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e128      	b.n	8002fbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a90      	ldr	r2, [pc, #576]	; (8002fc4 <HAL_I2S_Init+0x26c>)
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7fe ff8d 	bl	8001ca4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002da0:	f023 030f 	bic.w	r3, r3, #15
 8002da4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2202      	movs	r2, #2
 8002dac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d060      	beq.n	8002e78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002dbe:	2310      	movs	r3, #16
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	e001      	b.n	8002dc8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002dc4:	2320      	movs	r3, #32
 8002dc6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d802      	bhi.n	8002dd6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f001 fa5c 	bl	8004294 <HAL_RCCEx_GetPeriphCLKFreq>
 8002ddc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de6:	d125      	bne.n	8002e34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d010      	beq.n	8002e12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0c:	3305      	adds	r3, #5
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e01f      	b.n	8002e52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	3305      	adds	r3, #5
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e00e      	b.n	8002e52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	461a      	mov	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4e:	3305      	adds	r3, #5
 8002e50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4a5c      	ldr	r2, [pc, #368]	; (8002fc8 <HAL_I2S_Init+0x270>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	08db      	lsrs	r3, r3, #3
 8002e5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e003      	b.n	8002e80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d902      	bls.n	8002e8c <HAL_I2S_Init+0x134>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2bff      	cmp	r3, #255	; 0xff
 8002e8a:	d907      	bls.n	8002e9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	f043 0210 	orr.w	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e08f      	b.n	8002fbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	ea42 0103 	orr.w	r1, r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002eba:	f023 030f 	bic.w	r3, r3, #15
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6851      	ldr	r1, [r2, #4]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6892      	ldr	r2, [r2, #8]
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68d2      	ldr	r2, [r2, #12]
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6992      	ldr	r2, [r2, #24]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ede:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d161      	bne.n	8002fac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_I2S_Init+0x274>)
 8002eec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_I2S_Init+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d101      	bne.n	8002efc <HAL_I2S_Init+0x1a4>
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_I2S_Init+0x27c>)
 8002efa:	e001      	b.n	8002f00 <HAL_I2S_Init+0x1a8>
 8002efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	4932      	ldr	r1, [pc, #200]	; (8002fd0 <HAL_I2S_Init+0x278>)
 8002f08:	428a      	cmp	r2, r1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2S_Init+0x1b8>
 8002f0c:	4a31      	ldr	r2, [pc, #196]	; (8002fd4 <HAL_I2S_Init+0x27c>)
 8002f0e:	e001      	b.n	8002f14 <HAL_I2S_Init+0x1bc>
 8002f10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f18:	f023 030f 	bic.w	r3, r3, #15
 8002f1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_I2S_Init+0x278>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_I2S_Init+0x1d4>
 8002f28:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <HAL_I2S_Init+0x27c>)
 8002f2a:	e001      	b.n	8002f30 <HAL_I2S_Init+0x1d8>
 8002f2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f30:	2202      	movs	r2, #2
 8002f32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <HAL_I2S_Init+0x278>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_I2S_Init+0x1ea>
 8002f3e:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_I2S_Init+0x27c>)
 8002f40:	e001      	b.n	8002f46 <HAL_I2S_Init+0x1ee>
 8002f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f52:	d003      	beq.n	8002f5c <HAL_I2S_Init+0x204>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d103      	bne.n	8002f64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e001      	b.n	8002f68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002f64:	2300      	movs	r3, #0
 8002f66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	b299      	uxth	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002f7e:	4303      	orrs	r3, r0
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	430b      	orrs	r3, r1
 8002f84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002f86:	4313      	orrs	r3, r2
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	897b      	ldrh	r3, [r7, #10]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_I2S_Init+0x278>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_I2S_Init+0x24c>
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_I2S_Init+0x27c>)
 8002fa2:	e001      	b.n	8002fa8 <HAL_I2S_Init+0x250>
 8002fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa8:	897a      	ldrh	r2, [r7, #10]
 8002faa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3720      	adds	r7, #32
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	080032dd 	.word	0x080032dd
 8002fc8:	cccccccd 	.word	0xcccccccd
 8002fcc:	080033f1 	.word	0x080033f1
 8002fd0:	40003800 	.word	0x40003800
 8002fd4:	40003400 	.word	0x40003400

08002fd8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_I2S_Transmit_DMA+0x1a>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e08e      	b.n	8003114 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2S_Transmit_DMA+0x2e>
 8003002:	2302      	movs	r3, #2
 8003004:	e086      	b.n	8003114 <HAL_I2S_Transmit_DMA+0x13c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d005      	beq.n	8003026 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
 8003024:	e076      	b.n	8003114 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2203      	movs	r2, #3
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d002      	beq.n	8003052 <HAL_I2S_Transmit_DMA+0x7a>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10a      	bne.n	8003068 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800305c:	88fb      	ldrh	r3, [r7, #6]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003066:	e005      	b.n	8003074 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	4a28      	ldr	r2, [pc, #160]	; (800311c <HAL_I2S_Transmit_DMA+0x144>)
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_I2S_Transmit_DMA+0x148>)
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	4a26      	ldr	r2, [pc, #152]	; (8003124 <HAL_I2S_Transmit_DMA+0x14c>)
 800308a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003094:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800309c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80030a4:	f7ff f9e6 	bl	8002474 <HAL_DMA_Start_IT>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00f      	beq.n	80030ce <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b2:	f043 0208 	orr.w	r2, r3, #8
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030ea:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0202 	orr.w	r2, r2, #2
 8003108:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	080031bb 	.word	0x080031bb
 8003120:	08003179 	.word	0x08003179
 8003124:	080031d7 	.word	0x080031d7

08003128 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003184:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0202 	bic.w	r2, r2, #2
 800319c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff ffc5 	bl	800313c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f7ff ffad 	bl	8003128 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0203 	bic.w	r2, r2, #3
 80031f2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f043 0208 	orr.w	r2, r3, #8
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff ffa5 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	881a      	ldrh	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	1c9a      	adds	r2, r3, #2
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10e      	bne.n	8003276 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003266:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f7ff ff63 	bl	800313c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	b292      	uxth	r2, r2
 8003292:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	1c9a      	adds	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10e      	bne.n	80032d4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032c4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff3e 	bl	8003150 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d13a      	bne.n	800336e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d109      	bne.n	8003316 <I2S_IRQHandler+0x3a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d102      	bne.n	8003316 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ffb4 	bl	800327e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d126      	bne.n	800336e <I2S_IRQHandler+0x92>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d11f      	bne.n	800336e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800333c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003360:	f043 0202 	orr.w	r2, r3, #2
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff fefb 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d136      	bne.n	80033e8 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d109      	bne.n	8003398 <I2S_IRQHandler+0xbc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b80      	cmp	r3, #128	; 0x80
 8003390:	d102      	bne.n	8003398 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff ff45 	bl	8003222 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d122      	bne.n	80033e8 <I2S_IRQHandler+0x10c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d11b      	bne.n	80033e8 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033be:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f043 0204 	orr.w	r2, r3, #4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff febe 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033e8:	bf00      	nop
 80033ea:	3718      	adds	r7, #24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4aa2      	ldr	r2, [pc, #648]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d101      	bne.n	800340e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800340a:	4ba2      	ldr	r3, [pc, #648]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800340c:	e001      	b.n	8003412 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800340e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a9b      	ldr	r2, [pc, #620]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003428:	4b9a      	ldr	r3, [pc, #616]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800342a:	e001      	b.n	8003430 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800342c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d004      	beq.n	8003448 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 8099 	bne.w	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b02      	cmp	r3, #2
 8003450:	d107      	bne.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f925 	bl	80036ac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9c8 	bl	800380c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d13a      	bne.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d035      	beq.n	80034fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a7e      	ldr	r2, [pc, #504]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d101      	bne.n	800349e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800349a:	4b7e      	ldr	r3, [pc, #504]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800349c:	e001      	b.n	80034a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800349e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4979      	ldr	r1, [pc, #484]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034aa:	428b      	cmp	r3, r1
 80034ac:	d101      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80034ae:	4b79      	ldr	r3, [pc, #484]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f043 0202 	orr.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fe34 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	f040 80be 	bne.w	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 80b8 	beq.w	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003522:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a59      	ldr	r2, [pc, #356]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800352e:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003530:	e001      	b.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003532:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4954      	ldr	r1, [pc, #336]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800353e:	428b      	cmp	r3, r1
 8003540:	d101      	bne.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003544:	e001      	b.n	800354a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800354e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fdf6 	bl	8003164 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003578:	e084      	b.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d107      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f8be 	bl	8003710 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d107      	bne.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f8fd 	bl	80037a8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d12f      	bne.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d02a      	beq.n	8003618 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d101      	bne.n	80035e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035de:	e001      	b.n	80035e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80035e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4929      	ldr	r1, [pc, #164]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80035f0:	4b28      	ldr	r3, [pc, #160]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035f2:	e001      	b.n	80035f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80035f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fda6 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d131      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02c      	beq.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a17      	ldr	r2, [pc, #92]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d101      	bne.n	800363a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003638:	e001      	b.n	800363e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800363a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4912      	ldr	r1, [pc, #72]	; (8003690 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003646:	428b      	cmp	r3, r1
 8003648:	d101      	bne.n	800364e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800364c:	e001      	b.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800364e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003652:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003656:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003666:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fd71 	bl	8003164 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003682:	e000      	b.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003684:	bf00      	nop
}
 8003686:	bf00      	nop
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40003800 	.word	0x40003800
 8003694:	40003400 	.word	0x40003400

08003698 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c99      	adds	r1, r3, #2
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6251      	str	r1, [r2, #36]	; 0x24
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d113      	bne.n	8003706 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ffc9 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c99      	adds	r1, r3, #2
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6251      	str	r1, [r2, #36]	; 0x24
 8003722:	8819      	ldrh	r1, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d101      	bne.n	8003732 <I2SEx_TxISR_I2SExt+0x22>
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003730:	e001      	b.n	8003736 <I2SEx_TxISR_I2SExt+0x26>
 8003732:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003736:	460a      	mov	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d121      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d101      	bne.n	8003760 <I2SEx_TxISR_I2SExt+0x50>
 800375c:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 800375e:	e001      	b.n	8003764 <I2SEx_TxISR_I2SExt+0x54>
 8003760:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <I2SEx_TxISR_I2SExt+0x90>)
 800376c:	428b      	cmp	r3, r1
 800376e:	d101      	bne.n	8003774 <I2SEx_TxISR_I2SExt+0x64>
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <I2SEx_TxISR_I2SExt+0x94>)
 8003772:	e001      	b.n	8003778 <I2SEx_TxISR_I2SExt+0x68>
 8003774:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800377c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7ff ff81 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40003800 	.word	0x40003800
 80037a4:	40003400 	.word	0x40003400

080037a8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68d8      	ldr	r0, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	1c99      	adds	r1, r3, #2
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	62d1      	str	r1, [r2, #44]	; 0x2c
 80037c0:	b282      	uxth	r2, r0
 80037c2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff4a 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a20      	ldr	r2, [pc, #128]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <I2SEx_RxISR_I2SExt+0x16>
 800381e:	4b20      	ldr	r3, [pc, #128]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 8003820:	e001      	b.n	8003826 <I2SEx_RxISR_I2SExt+0x1a>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	68d8      	ldr	r0, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	1c99      	adds	r1, r3, #2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003832:	b282      	uxth	r2, r0
 8003834:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d121      	bne.n	8003892 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <I2SEx_RxISR_I2SExt+0x50>
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 800385a:	e001      	b.n	8003860 <I2SEx_RxISR_I2SExt+0x54>
 800385c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	490d      	ldr	r1, [pc, #52]	; (800389c <I2SEx_RxISR_I2SExt+0x90>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d101      	bne.n	8003870 <I2SEx_RxISR_I2SExt+0x64>
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <I2SEx_RxISR_I2SExt+0x94>)
 800386e:	e001      	b.n	8003874 <I2SEx_RxISR_I2SExt+0x68>
 8003870:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003874:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003878:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d106      	bne.n	8003892 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff03 	bl	8003698 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40003800 	.word	0x40003800
 80038a0:	40003400 	.word	0x40003400

080038a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e25b      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d075      	beq.n	80039ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038c2:	4ba3      	ldr	r3, [pc, #652]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ce:	4ba0      	ldr	r3, [pc, #640]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d112      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038da:	4b9d      	ldr	r3, [pc, #628]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e6:	d10b      	bne.n	8003900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e8:	4b99      	ldr	r3, [pc, #612]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05b      	beq.n	80039ac <HAL_RCC_OscConfig+0x108>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d157      	bne.n	80039ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e236      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x74>
 800390a:	4b91      	ldr	r3, [pc, #580]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a90      	ldr	r2, [pc, #576]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e01d      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x98>
 8003922:	4b8b      	ldr	r3, [pc, #556]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a8a      	ldr	r2, [pc, #552]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800392c:	6013      	str	r3, [r2, #0]
 800392e:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a87      	ldr	r2, [pc, #540]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0xb0>
 800393c:	4b84      	ldr	r3, [pc, #528]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a83      	ldr	r2, [pc, #524]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a80      	ldr	r2, [pc, #512]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fe fb9c 	bl	8002098 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003964:	f7fe fb98 	bl	8002098 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e1fb      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0f0      	beq.n	8003964 <HAL_RCC_OscConfig+0xc0>
 8003982:	e014      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fb88 	bl	8002098 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800398c:	f7fe fb84 	bl	8002098 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e1e7      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800399e:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0xe8>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d063      	beq.n	8003a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ba:	4b65      	ldr	r3, [pc, #404]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039c6:	4b62      	ldr	r3, [pc, #392]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d11c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039d2:	4b5f      	ldr	r3, [pc, #380]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d116      	bne.n	8003a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039de:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e1bb      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f6:	4b56      	ldr	r3, [pc, #344]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4952      	ldr	r1, [pc, #328]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d020      	beq.n	8003a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_RCC_OscConfig+0x2b0>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1a:	f7fe fb3d 	bl	8002098 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fe fb39 	bl	8002098 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e19c      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a34:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b43      	ldr	r3, [pc, #268]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4940      	ldr	r1, [pc, #256]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	600b      	str	r3, [r1, #0]
 8003a54:	e015      	b.n	8003a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a56:	4b3f      	ldr	r3, [pc, #252]	; (8003b54 <HAL_RCC_OscConfig+0x2b0>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7fe fb1c 	bl	8002098 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a64:	f7fe fb18 	bl	8002098 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e17b      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0308 	and.w	r3, r3, #8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d030      	beq.n	8003af0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a96:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <HAL_RCC_OscConfig+0x2b4>)
 8003a98:	2201      	movs	r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9c:	f7fe fafc 	bl	8002098 <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa4:	f7fe faf8 	bl	8002098 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e15b      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0f0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x200>
 8003ac2:	e015      	b.n	8003af0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ac4:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x2b4>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fe fae5 	bl	8002098 <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ad2:	f7fe fae1 	bl	8002098 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e144      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a0 	beq.w	8003c3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10f      	bne.n	8003b2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	4a0e      	ldr	r2, [pc, #56]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x2b8>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d121      	bne.n	8003b7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_RCC_OscConfig+0x2b8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <HAL_RCC_OscConfig+0x2b8>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b46:	f7fe faa7 	bl	8002098 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4c:	e011      	b.n	8003b72 <HAL_RCC_OscConfig+0x2ce>
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800
 8003b54:	42470000 	.word	0x42470000
 8003b58:	42470e80 	.word	0x42470e80
 8003b5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fe fa9a 	bl	8002098 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e0fd      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	4b81      	ldr	r3, [pc, #516]	; (8003d78 <HAL_RCC_OscConfig+0x4d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x2f0>
 8003b86:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	6713      	str	r3, [r2, #112]	; 0x70
 8003b92:	e01c      	b.n	8003bce <HAL_RCC_OscConfig+0x32a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x312>
 8003b9c:	4b77      	ldr	r3, [pc, #476]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a76      	ldr	r2, [pc, #472]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003ba2:	f043 0304 	orr.w	r3, r3, #4
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ba8:	4b74      	ldr	r3, [pc, #464]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a73      	ldr	r2, [pc, #460]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb4:	e00b      	b.n	8003bce <HAL_RCC_OscConfig+0x32a>
 8003bb6:	4b71      	ldr	r3, [pc, #452]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bba:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc2:	4b6e      	ldr	r3, [pc, #440]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc6:	4a6d      	ldr	r2, [pc, #436]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fa5f 	bl	8002098 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe fa5b 	bl	8002098 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0bc      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	4b61      	ldr	r3, [pc, #388]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ee      	beq.n	8003bde <HAL_RCC_OscConfig+0x33a>
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fa49 	bl	8002098 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fa45 	bl	8002098 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0a6      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	4b56      	ldr	r3, [pc, #344]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b52      	ldr	r3, [pc, #328]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a51      	ldr	r2, [pc, #324]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8092 	beq.w	8003d6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c48:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d05c      	beq.n	8003d0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d141      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b48      	ldr	r3, [pc, #288]	; (8003d80 <HAL_RCC_OscConfig+0x4dc>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c62:	f7fe fa19 	bl	8002098 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fe fa15 	bl	8002098 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e078      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7c:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	019b      	lsls	r3, r3, #6
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003caa:	061b      	lsls	r3, r3, #24
 8003cac:	4933      	ldr	r1, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb2:	4b33      	ldr	r3, [pc, #204]	; (8003d80 <HAL_RCC_OscConfig+0x4dc>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fe f9ee 	bl	8002098 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc0:	f7fe f9ea 	bl	8002098 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e04d      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f0      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x41c>
 8003cde:	e045      	b.n	8003d6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_RCC_OscConfig+0x4dc>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe f9d7 	bl	8002098 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cee:	f7fe f9d3 	bl	8002098 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e036      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f0      	bne.n	8003cee <HAL_RCC_OscConfig+0x44a>
 8003d0c:	e02e      	b.n	8003d6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e029      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <HAL_RCC_OscConfig+0x4d8>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d11c      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d115      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d42:	4013      	ands	r3, r2
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d10d      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	42470060 	.word	0x42470060

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cc      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d90c      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b65      	ldr	r3, [pc, #404]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0b8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d020      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	4a58      	ldr	r2, [pc, #352]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003df0:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a52      	ldr	r2, [pc, #328]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	494d      	ldr	r1, [pc, #308]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d044      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d119      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d003      	beq.n	8003e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d109      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e06f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e52:	4b3b      	ldr	r3, [pc, #236]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e067      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e62:	4b37      	ldr	r3, [pc, #220]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f023 0203 	bic.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4934      	ldr	r1, [pc, #208]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fe f910 	bl	8002098 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7c:	f7fe f90c 	bl	8002098 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e04f      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	4b2b      	ldr	r3, [pc, #172]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 020c 	and.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1eb      	bne.n	8003e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d20c      	bcs.n	8003ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_RCC_ClockConfig+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e032      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d008      	beq.n	8003eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed8:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4916      	ldr	r1, [pc, #88]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef6:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	490e      	ldr	r1, [pc, #56]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f0a:	f000 f821 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f0e:	4601      	mov	r1, r0
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <HAL_RCC_ClockConfig+0x1c0>)
 8003f1c:	5cd3      	ldrb	r3, [r2, r3]
 8003f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1c4>)
 8003f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_ClockConfig+0x1c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f870 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023c00 	.word	0x40023c00
 8003f40:	40023800 	.word	0x40023800
 8003f44:	08060e5c 	.word	0x08060e5c
 8003f48:	2001d068 	.word	0x2001d068
 8003f4c:	2001d06c 	.word	0x2001d06c

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f66:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d007      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x32>
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d008      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x38>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 808d 	bne.w	8004096 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f7e:	60bb      	str	r3, [r7, #8]
       break;
 8003f80:	e08c      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f82:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003f84:	60bb      	str	r3, [r7, #8]
      break;
 8003f86:	e089      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f88:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f92:	4b45      	ldr	r3, [pc, #276]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d023      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	099b      	lsrs	r3, r3, #6
 8003fa4:	f04f 0400 	mov.w	r4, #0
 8003fa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	ea03 0501 	and.w	r5, r3, r1
 8003fb4:	ea04 0602 	and.w	r6, r4, r2
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fba:	fb02 f106 	mul.w	r1, r2, r6
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	fb02 f205 	mul.w	r2, r2, r5
 8003fc4:	440a      	add	r2, r1
 8003fc6:	493a      	ldr	r1, [pc, #232]	; (80040b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003fc8:	fba5 0101 	umull	r0, r1, r5, r1
 8003fcc:	1853      	adds	r3, r2, r1
 8003fce:	4619      	mov	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f04f 0400 	mov.w	r4, #0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4623      	mov	r3, r4
 8003fda:	f7fc f8fd 	bl	80001d8 <__aeabi_uldivmod>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e049      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	f04f 0400 	mov.w	r4, #0
 8003ff0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	ea03 0501 	and.w	r5, r3, r1
 8003ffc:	ea04 0602 	and.w	r6, r4, r2
 8004000:	4629      	mov	r1, r5
 8004002:	4632      	mov	r2, r6
 8004004:	f04f 0300 	mov.w	r3, #0
 8004008:	f04f 0400 	mov.w	r4, #0
 800400c:	0154      	lsls	r4, r2, #5
 800400e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004012:	014b      	lsls	r3, r1, #5
 8004014:	4619      	mov	r1, r3
 8004016:	4622      	mov	r2, r4
 8004018:	1b49      	subs	r1, r1, r5
 800401a:	eb62 0206 	sbc.w	r2, r2, r6
 800401e:	f04f 0300 	mov.w	r3, #0
 8004022:	f04f 0400 	mov.w	r4, #0
 8004026:	0194      	lsls	r4, r2, #6
 8004028:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800402c:	018b      	lsls	r3, r1, #6
 800402e:	1a5b      	subs	r3, r3, r1
 8004030:	eb64 0402 	sbc.w	r4, r4, r2
 8004034:	f04f 0100 	mov.w	r1, #0
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	00e2      	lsls	r2, r4, #3
 800403e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004042:	00d9      	lsls	r1, r3, #3
 8004044:	460b      	mov	r3, r1
 8004046:	4614      	mov	r4, r2
 8004048:	195b      	adds	r3, r3, r5
 800404a:	eb44 0406 	adc.w	r4, r4, r6
 800404e:	f04f 0100 	mov.w	r1, #0
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	02a2      	lsls	r2, r4, #10
 8004058:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800405c:	0299      	lsls	r1, r3, #10
 800405e:	460b      	mov	r3, r1
 8004060:	4614      	mov	r4, r2
 8004062:	4618      	mov	r0, r3
 8004064:	4621      	mov	r1, r4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f04f 0400 	mov.w	r4, #0
 800406c:	461a      	mov	r2, r3
 800406e:	4623      	mov	r3, r4
 8004070:	f7fc f8b2 	bl	80001d8 <__aeabi_uldivmod>
 8004074:	4603      	mov	r3, r0
 8004076:	460c      	mov	r4, r1
 8004078:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800407a:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	3301      	adds	r3, #1
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	60bb      	str	r3, [r7, #8]
      break;
 8004094:	e002      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8004098:	60bb      	str	r3, [r7, #8]
      break;
 800409a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800409c:	68bb      	ldr	r3, [r7, #8]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	00f42400 	.word	0x00f42400
 80040b0:	017d7840 	.word	0x017d7840

080040b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d038      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e2:	f7fd ffd9 	bl	8002098 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ea:	f7fd ffd5 	bl	8002098 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e0bd      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040fc:	4b61      	ldr	r3, [pc, #388]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	019b      	lsls	r3, r3, #6
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	071b      	lsls	r3, r3, #28
 800411a:	495a      	ldr	r1, [pc, #360]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004122:	4b57      	ldr	r3, [pc, #348]	; (8004280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004128:	f7fd ffb6 	bl	8002098 <HAL_GetTick>
 800412c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004130:	f7fd ffb2 	bl	8002098 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e09a      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004142:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8083 	beq.w	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	4a47      	ldr	r2, [pc, #284]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	6413      	str	r3, [r2, #64]	; 0x40
 800416c:	4b45      	ldr	r3, [pc, #276]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004178:	4b43      	ldr	r3, [pc, #268]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a42      	ldr	r2, [pc, #264]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004184:	f7fd ff88 	bl	8002098 <HAL_GetTick>
 8004188:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800418c:	f7fd ff84 	bl	8002098 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e06c      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800419e:	4b3a      	ldr	r3, [pc, #232]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041aa:	4b36      	ldr	r3, [pc, #216]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02f      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d028      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c8:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	4b2c      	ldr	r3, [pc, #176]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041de:	4a29      	ldr	r2, [pc, #164]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041e4:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d114      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd ff52 	bl	8002098 <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fd ff4e 	bl	8002098 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e034      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0ee      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004226:	d10d      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004228:	4b16      	ldr	r3, [pc, #88]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	4911      	ldr	r1, [pc, #68]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
 8004242:	e005      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4a0e      	ldr	r2, [pc, #56]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800424e:	6093      	str	r3, [r2, #8]
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	4909      	ldr	r1, [pc, #36]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800425e:	4313      	orrs	r3, r2
 8004260:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7d1a      	ldrb	r2, [r3, #20]
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004274:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	42470068 	.word	0x42470068
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
 800428c:	42470e40 	.word	0x42470e40
 8004290:	424711e0 	.word	0x424711e0

08004294 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d13f      	bne.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042b2:	4b23      	ldr	r3, [pc, #140]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d131      	bne.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042c6:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042c8:	617b      	str	r3, [r7, #20]
          break;
 80042ca:	e031      	b.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d8:	d109      	bne.n	80042ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e4:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ea:	613b      	str	r3, [r7, #16]
 80042ec:	e008      	b.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80042fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fe:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004300:	4b0f      	ldr	r3, [pc, #60]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004306:	099b      	lsrs	r3, r3, #6
 8004308:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004314:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431a:	0f1b      	lsrs	r3, r3, #28
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	617b      	str	r3, [r7, #20]
          break;
 8004328:	e002      	b.n	8004330 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
          break;
 800432e:	bf00      	nop
        }
      }
      break;
 8004330:	bf00      	nop
    }
  }
  return frequency;
 8004332:	697b      	ldr	r3, [r7, #20]
}
 8004334:	4618      	mov	r0, r3
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40023800 	.word	0x40023800
 8004344:	00bb8000 	.word	0x00bb8000
 8004348:	017d7840 	.word	0x017d7840
 800434c:	00f42400 	.word	0x00f42400

08004350 <__errno>:
 8004350:	4b01      	ldr	r3, [pc, #4]	; (8004358 <__errno+0x8>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	2001d074 	.word	0x2001d074

0800435c <__libc_init_array>:
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	4e0d      	ldr	r6, [pc, #52]	; (8004394 <__libc_init_array+0x38>)
 8004360:	4c0d      	ldr	r4, [pc, #52]	; (8004398 <__libc_init_array+0x3c>)
 8004362:	1ba4      	subs	r4, r4, r6
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	2500      	movs	r5, #0
 8004368:	42a5      	cmp	r5, r4
 800436a:	d109      	bne.n	8004380 <__libc_init_array+0x24>
 800436c:	4e0b      	ldr	r6, [pc, #44]	; (800439c <__libc_init_array+0x40>)
 800436e:	4c0c      	ldr	r4, [pc, #48]	; (80043a0 <__libc_init_array+0x44>)
 8004370:	f000 f920 	bl	80045b4 <_init>
 8004374:	1ba4      	subs	r4, r4, r6
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	2500      	movs	r5, #0
 800437a:	42a5      	cmp	r5, r4
 800437c:	d105      	bne.n	800438a <__libc_init_array+0x2e>
 800437e:	bd70      	pop	{r4, r5, r6, pc}
 8004380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004384:	4798      	blx	r3
 8004386:	3501      	adds	r5, #1
 8004388:	e7ee      	b.n	8004368 <__libc_init_array+0xc>
 800438a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800438e:	4798      	blx	r3
 8004390:	3501      	adds	r5, #1
 8004392:	e7f2      	b.n	800437a <__libc_init_array+0x1e>
 8004394:	08060e7c 	.word	0x08060e7c
 8004398:	08060e7c 	.word	0x08060e7c
 800439c:	08060e7c 	.word	0x08060e7c
 80043a0:	08060e80 	.word	0x08060e80

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <srand>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <srand+0x38>)
 80043b8:	681c      	ldr	r4, [r3, #0]
 80043ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043bc:	4605      	mov	r5, r0
 80043be:	b97b      	cbnz	r3, 80043e0 <srand+0x2c>
 80043c0:	2018      	movs	r0, #24
 80043c2:	f000 f87b 	bl	80044bc <malloc>
 80043c6:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <srand+0x3c>)
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <srand+0x40>)
 80043ca:	63a0      	str	r0, [r4, #56]	; 0x38
 80043cc:	e9c0 2300 	strd	r2, r3, [r0]
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <srand+0x44>)
 80043d2:	6083      	str	r3, [r0, #8]
 80043d4:	230b      	movs	r3, #11
 80043d6:	8183      	strh	r3, [r0, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	2300      	movs	r3, #0
 80043dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80043e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043e2:	2200      	movs	r2, #0
 80043e4:	611d      	str	r5, [r3, #16]
 80043e6:	615a      	str	r2, [r3, #20]
 80043e8:	bd38      	pop	{r3, r4, r5, pc}
 80043ea:	bf00      	nop
 80043ec:	2001d074 	.word	0x2001d074
 80043f0:	abcd330e 	.word	0xabcd330e
 80043f4:	e66d1234 	.word	0xe66d1234
 80043f8:	0005deec 	.word	0x0005deec

080043fc <rand>:
 80043fc:	b538      	push	{r3, r4, r5, lr}
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <rand+0x50>)
 8004400:	681c      	ldr	r4, [r3, #0]
 8004402:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004404:	b97b      	cbnz	r3, 8004426 <rand+0x2a>
 8004406:	2018      	movs	r0, #24
 8004408:	f000 f858 	bl	80044bc <malloc>
 800440c:	4a10      	ldr	r2, [pc, #64]	; (8004450 <rand+0x54>)
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <rand+0x58>)
 8004410:	63a0      	str	r0, [r4, #56]	; 0x38
 8004412:	e9c0 2300 	strd	r2, r3, [r0]
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <rand+0x5c>)
 8004418:	6083      	str	r3, [r0, #8]
 800441a:	230b      	movs	r3, #11
 800441c:	8183      	strh	r3, [r0, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	2300      	movs	r3, #0
 8004422:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004426:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004428:	480c      	ldr	r0, [pc, #48]	; (800445c <rand+0x60>)
 800442a:	690a      	ldr	r2, [r1, #16]
 800442c:	694b      	ldr	r3, [r1, #20]
 800442e:	4c0c      	ldr	r4, [pc, #48]	; (8004460 <rand+0x64>)
 8004430:	4350      	muls	r0, r2
 8004432:	fb04 0003 	mla	r0, r4, r3, r0
 8004436:	fba2 2304 	umull	r2, r3, r2, r4
 800443a:	4403      	add	r3, r0
 800443c:	1c54      	adds	r4, r2, #1
 800443e:	f143 0500 	adc.w	r5, r3, #0
 8004442:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004446:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	2001d074 	.word	0x2001d074
 8004450:	abcd330e 	.word	0xabcd330e
 8004454:	e66d1234 	.word	0xe66d1234
 8004458:	0005deec 	.word	0x0005deec
 800445c:	5851f42d 	.word	0x5851f42d
 8004460:	4c957f2d 	.word	0x4c957f2d

08004464 <time>:
 8004464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <time+0x30>)
 8004468:	4604      	mov	r4, r0
 800446a:	2200      	movs	r2, #0
 800446c:	4669      	mov	r1, sp
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	f000 f812 	bl	8004498 <_gettimeofday_r>
 8004474:	2800      	cmp	r0, #0
 8004476:	da05      	bge.n	8004484 <time+0x20>
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	f04f 33ff 	mov.w	r3, #4294967295
 8004480:	e9cd 2300 	strd	r2, r3, [sp]
 8004484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004488:	b10c      	cbz	r4, 800448e <time+0x2a>
 800448a:	e9c4 0100 	strd	r0, r1, [r4]
 800448e:	b004      	add	sp, #16
 8004490:	bd10      	pop	{r4, pc}
 8004492:	bf00      	nop
 8004494:	2001d074 	.word	0x2001d074

08004498 <_gettimeofday_r>:
 8004498:	b538      	push	{r3, r4, r5, lr}
 800449a:	4c07      	ldr	r4, [pc, #28]	; (80044b8 <_gettimeofday_r+0x20>)
 800449c:	2300      	movs	r3, #0
 800449e:	4605      	mov	r5, r0
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	f000 f87d 	bl	80045a4 <_gettimeofday>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	d102      	bne.n	80044b4 <_gettimeofday_r+0x1c>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	b103      	cbz	r3, 80044b4 <_gettimeofday_r+0x1c>
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	bd38      	pop	{r3, r4, r5, pc}
 80044b6:	bf00      	nop
 80044b8:	2001dd30 	.word	0x2001dd30

080044bc <malloc>:
 80044bc:	4b02      	ldr	r3, [pc, #8]	; (80044c8 <malloc+0xc>)
 80044be:	4601      	mov	r1, r0
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	f000 b803 	b.w	80044cc <_malloc_r>
 80044c6:	bf00      	nop
 80044c8:	2001d074 	.word	0x2001d074

080044cc <_malloc_r>:
 80044cc:	b570      	push	{r4, r5, r6, lr}
 80044ce:	1ccd      	adds	r5, r1, #3
 80044d0:	f025 0503 	bic.w	r5, r5, #3
 80044d4:	3508      	adds	r5, #8
 80044d6:	2d0c      	cmp	r5, #12
 80044d8:	bf38      	it	cc
 80044da:	250c      	movcc	r5, #12
 80044dc:	2d00      	cmp	r5, #0
 80044de:	4606      	mov	r6, r0
 80044e0:	db01      	blt.n	80044e6 <_malloc_r+0x1a>
 80044e2:	42a9      	cmp	r1, r5
 80044e4:	d903      	bls.n	80044ee <_malloc_r+0x22>
 80044e6:	230c      	movs	r3, #12
 80044e8:	6033      	str	r3, [r6, #0]
 80044ea:	2000      	movs	r0, #0
 80044ec:	bd70      	pop	{r4, r5, r6, pc}
 80044ee:	f000 f857 	bl	80045a0 <__malloc_lock>
 80044f2:	4a21      	ldr	r2, [pc, #132]	; (8004578 <_malloc_r+0xac>)
 80044f4:	6814      	ldr	r4, [r2, #0]
 80044f6:	4621      	mov	r1, r4
 80044f8:	b991      	cbnz	r1, 8004520 <_malloc_r+0x54>
 80044fa:	4c20      	ldr	r4, [pc, #128]	; (800457c <_malloc_r+0xb0>)
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	b91b      	cbnz	r3, 8004508 <_malloc_r+0x3c>
 8004500:	4630      	mov	r0, r6
 8004502:	f000 f83d 	bl	8004580 <_sbrk_r>
 8004506:	6020      	str	r0, [r4, #0]
 8004508:	4629      	mov	r1, r5
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f838 	bl	8004580 <_sbrk_r>
 8004510:	1c43      	adds	r3, r0, #1
 8004512:	d124      	bne.n	800455e <_malloc_r+0x92>
 8004514:	230c      	movs	r3, #12
 8004516:	6033      	str	r3, [r6, #0]
 8004518:	4630      	mov	r0, r6
 800451a:	f000 f842 	bl	80045a2 <__malloc_unlock>
 800451e:	e7e4      	b.n	80044ea <_malloc_r+0x1e>
 8004520:	680b      	ldr	r3, [r1, #0]
 8004522:	1b5b      	subs	r3, r3, r5
 8004524:	d418      	bmi.n	8004558 <_malloc_r+0x8c>
 8004526:	2b0b      	cmp	r3, #11
 8004528:	d90f      	bls.n	800454a <_malloc_r+0x7e>
 800452a:	600b      	str	r3, [r1, #0]
 800452c:	50cd      	str	r5, [r1, r3]
 800452e:	18cc      	adds	r4, r1, r3
 8004530:	4630      	mov	r0, r6
 8004532:	f000 f836 	bl	80045a2 <__malloc_unlock>
 8004536:	f104 000b 	add.w	r0, r4, #11
 800453a:	1d23      	adds	r3, r4, #4
 800453c:	f020 0007 	bic.w	r0, r0, #7
 8004540:	1ac3      	subs	r3, r0, r3
 8004542:	d0d3      	beq.n	80044ec <_malloc_r+0x20>
 8004544:	425a      	negs	r2, r3
 8004546:	50e2      	str	r2, [r4, r3]
 8004548:	e7d0      	b.n	80044ec <_malloc_r+0x20>
 800454a:	428c      	cmp	r4, r1
 800454c:	684b      	ldr	r3, [r1, #4]
 800454e:	bf16      	itet	ne
 8004550:	6063      	strne	r3, [r4, #4]
 8004552:	6013      	streq	r3, [r2, #0]
 8004554:	460c      	movne	r4, r1
 8004556:	e7eb      	b.n	8004530 <_malloc_r+0x64>
 8004558:	460c      	mov	r4, r1
 800455a:	6849      	ldr	r1, [r1, #4]
 800455c:	e7cc      	b.n	80044f8 <_malloc_r+0x2c>
 800455e:	1cc4      	adds	r4, r0, #3
 8004560:	f024 0403 	bic.w	r4, r4, #3
 8004564:	42a0      	cmp	r0, r4
 8004566:	d005      	beq.n	8004574 <_malloc_r+0xa8>
 8004568:	1a21      	subs	r1, r4, r0
 800456a:	4630      	mov	r0, r6
 800456c:	f000 f808 	bl	8004580 <_sbrk_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d0cf      	beq.n	8004514 <_malloc_r+0x48>
 8004574:	6025      	str	r5, [r4, #0]
 8004576:	e7db      	b.n	8004530 <_malloc_r+0x64>
 8004578:	2001d11c 	.word	0x2001d11c
 800457c:	2001d120 	.word	0x2001d120

08004580 <_sbrk_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4c06      	ldr	r4, [pc, #24]	; (800459c <_sbrk_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4605      	mov	r5, r0
 8004588:	4608      	mov	r0, r1
 800458a:	6023      	str	r3, [r4, #0]
 800458c:	f7fd fcb2 	bl	8001ef4 <_sbrk>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_sbrk_r+0x1a>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	b103      	cbz	r3, 800459a <_sbrk_r+0x1a>
 8004598:	602b      	str	r3, [r5, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	2001dd30 	.word	0x2001dd30

080045a0 <__malloc_lock>:
 80045a0:	4770      	bx	lr

080045a2 <__malloc_unlock>:
 80045a2:	4770      	bx	lr

080045a4 <_gettimeofday>:
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <_gettimeofday+0xc>)
 80045a6:	2258      	movs	r2, #88	; 0x58
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	4770      	bx	lr
 80045b0:	2001dd30 	.word	0x2001dd30

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	bf00      	nop
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	bf00      	nop
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr
